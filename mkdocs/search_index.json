{
    "docs": [
        {
            "location": "/index.html", 
            "text": "Octomatic Developers\n\n\nWelcome to the Octomatic Developers section. You'll find comprehensive details about the fundamental architecture, API Documentation, Starter Kit and FAQs. It'll help you start working with Octomatic Enterprise in a snap.\n\n\nThis Developers section is divided into following segments:\n\n\n\n\nArchitecture and Concepts\n\n\nAPI Documentation\n\n\nAPI Swagger\n\n\nStarter Kit", 
            "title": "Home"
        }, 
        {
            "location": "/index.html#octomatic_developers", 
            "text": "Welcome to the Octomatic Developers section. You'll find comprehensive details about the fundamental architecture, API Documentation, Starter Kit and FAQs. It'll help you start working with Octomatic Enterprise in a snap.  This Developers section is divided into following segments:   Architecture and Concepts  API Documentation  API Swagger  Starter Kit", 
            "title": "Octomatic Developers"
        }, 
        {
            "location": "/Arconcepts/index.html", 
            "text": "Architecture \n Concepts\n\n\nIn it's simplest form, the enterprise creates a \ndata stream\n of events from their end to Octomatic's end. This data stream is consumed and transformed into Octomatic's intelligence. This intelligence powers certain actions like - sending push notification to a user.\n\n\n\n\n\n\nArchitecture \n Concepts\n\n\nData Stream\n\n\nEndpoint\n\n\nOrigin\n\n\n\n\n\n\nActions\n\n\nPush Notification\n\n\n\n\n\n\nProducts\n\n\nPrice\n\n\n\n\n\n\nPage\n\n\n\n\n\n\n\n\n\n\nData Stream\n\n\nA data stream is an infinite stream of events. These events would typically include user actions like login, logout, pageview etc. Like any stream has one origin and one endpoint. The origin lies on the mobile app/web of the enteprise, while the endpoint is maintained by Octomatic.\n\n\nEndpoint\n\n\nOctomatic provides two endpoints.\n\n\n\n\nSandbox : For all the development needs\n\n\nProduction : For all the production environment.\n\n\n\n\nThese are RESTful endpoints. The endpoints are authenticated using an \nAPI KEY\n. \n\n\nA typical request to an endpoint would include api key, body json data. A typical response from an endpoint include a json data.\n\n\nOrigin\n\n\nThe origin lies at places where an event happens. Typically this would be in the mobile apps, websites where users do certain activity.\n\n\nThere are specific API calls which takes input json data in a specific format. You'll find more details on API in the API section.\n\n\nActions\n\n\nActions are actions that Octomatic takes on an enterprise's behalf. These actions are powered by the intelligence derived from Data Stream of events.\n\n\nPush Notification\n\n\nOctomatic sends push notifications on enterprise's behalf. Hence, it needs to be aware of Google Cloud Messaging (GCM) or Apple Push Notification Service (SSL) authentication credentials.\n\n\nProducts\n\n\nIt is worthy mentioning the concept of product. Product is anything a consumer consumes. It could be a video that is watched by the user. It could be a blog post read by the user. It could be a materialistic object purchased by the user. Or it could be a game that is played by the user. You can define any product based on your business needs.\n\n\nPrice\n\n\nEach product must have a price associated with it. The price could be either\n\n\n\n\nTime\n\n\nMoney\n\n\n\n\nBasically, price is the quantity of a unit that user spends in order to consume the product.\n\n\nIf it is a blog article, the users pay a price in time consuming the article.\n\n\nIf it is a materialistic thing, the users pay a price in money consuming the product.\n\n\nPage\n\n\nAny page that is \nNOT\n a product page is a page.", 
            "title": "Architecture"
        }, 
        {
            "location": "/Arconcepts/index.html#architecture_concepts", 
            "text": "In it's simplest form, the enterprise creates a  data stream  of events from their end to Octomatic's end. This data stream is consumed and transformed into Octomatic's intelligence. This intelligence powers certain actions like - sending push notification to a user.    Architecture   Concepts  Data Stream  Endpoint  Origin    Actions  Push Notification    Products  Price    Page", 
            "title": "Architecture &amp; Concepts"
        }, 
        {
            "location": "/Arconcepts/index.html#data_stream", 
            "text": "A data stream is an infinite stream of events. These events would typically include user actions like login, logout, pageview etc. Like any stream has one origin and one endpoint. The origin lies on the mobile app/web of the enteprise, while the endpoint is maintained by Octomatic.", 
            "title": "Data Stream"
        }, 
        {
            "location": "/Arconcepts/index.html#endpoint", 
            "text": "Octomatic provides two endpoints.   Sandbox : For all the development needs  Production : For all the production environment.   These are RESTful endpoints. The endpoints are authenticated using an  API KEY .   A typical request to an endpoint would include api key, body json data. A typical response from an endpoint include a json data.", 
            "title": "Endpoint"
        }, 
        {
            "location": "/Arconcepts/index.html#origin", 
            "text": "The origin lies at places where an event happens. Typically this would be in the mobile apps, websites where users do certain activity.  There are specific API calls which takes input json data in a specific format. You'll find more details on API in the API section.", 
            "title": "Origin"
        }, 
        {
            "location": "/Arconcepts/index.html#actions", 
            "text": "Actions are actions that Octomatic takes on an enterprise's behalf. These actions are powered by the intelligence derived from Data Stream of events.", 
            "title": "Actions"
        }, 
        {
            "location": "/Arconcepts/index.html#push_notification", 
            "text": "Octomatic sends push notifications on enterprise's behalf. Hence, it needs to be aware of Google Cloud Messaging (GCM) or Apple Push Notification Service (SSL) authentication credentials.", 
            "title": "Push Notification"
        }, 
        {
            "location": "/Arconcepts/index.html#products", 
            "text": "It is worthy mentioning the concept of product. Product is anything a consumer consumes. It could be a video that is watched by the user. It could be a blog post read by the user. It could be a materialistic object purchased by the user. Or it could be a game that is played by the user. You can define any product based on your business needs.", 
            "title": "Products"
        }, 
        {
            "location": "/Arconcepts/index.html#price", 
            "text": "Each product must have a price associated with it. The price could be either   Time  Money   Basically, price is the quantity of a unit that user spends in order to consume the product.  If it is a blog article, the users pay a price in time consuming the article.  If it is a materialistic thing, the users pay a price in money consuming the product.", 
            "title": "Price"
        }, 
        {
            "location": "/Arconcepts/index.html#page", 
            "text": "Any page that is  NOT  a product page is a page.", 
            "title": "Page"
        }, 
        {
            "location": "/StarterKit/index.html", 
            "text": "Starter Kit\n\n\nOctomatic Enterprise onboarding includes a starter kit for following platforms:\n\n\n\n\niOS\n\n\nObjective C\n\n\nSwift\n\n\n\n\n\n\nAndroid\n\n\nNative\n\n\nCordova\n\n\n\n\n\n\nDesktop\n\n\nWeb\n\n\n\n\nWe support two major push notification services\n\n\n\n\nApple Push Notification Service (APNS)\n\n\nGoogle Cloud Messaging (GCM)\n\n\n\n\nThe starter kit contains code for all the valid permutations of above.\n\n\nDepending on the platform you have for your app and for the push notifications click on one of the following:\n\n\n\n\niOS, APNS (Objective C / Swift)\n\n\niOS, GCM (Objective C / Swift)\n\n\nAndroid, GCM, Native\n\n\nAndroid, GCM, Cordova\n\n\n\n\nAdditionally, we provide client libraries for following languages:\n\n\n\n\nClojure\n\n\nJavascript\n\n\nPython\n\n\nRuby\n\n\n\n\nThis part of the Knowledge Base will detail into the starter kit. It will cover how to set up data stream on iOS and android and explain about the coding guidelines.\n\n\nGeneral Guidelines\n\n\nThese are very general guidelines to implement Octomatic data stream for any platform. Although the examples are specific to ios, android; they can be implemented on any system that allows for following data points.\n\n\nTo begin with your app should be enabled for following user permissions:\n\n\n\n\nAccess location while app is running in foreground\n\n\nAble to recieve push notification from a server authenticated with your credentials. Chances are you are using one of these services:\n\n\nGoogle Cloud Messaging (GCM)\n\n\nAndroid\n\n\niOS\n\n\n\n\n\n\nApple Push Notification Service (APNS), iOS only\n\n\nAble to retrieve device specific details such as\n\n\nOS Version\n\n\nManufacturer\n\n\nDevice Unique ID\n\n\nAble to connect to internet", 
            "title": "Starter Kit"
        }, 
        {
            "location": "/StarterKit/index.html#starter_kit", 
            "text": "Octomatic Enterprise onboarding includes a starter kit for following platforms:   iOS  Objective C  Swift    Android  Native  Cordova    Desktop  Web   We support two major push notification services   Apple Push Notification Service (APNS)  Google Cloud Messaging (GCM)   The starter kit contains code for all the valid permutations of above.  Depending on the platform you have for your app and for the push notifications click on one of the following:   iOS, APNS (Objective C / Swift)  iOS, GCM (Objective C / Swift)  Android, GCM, Native  Android, GCM, Cordova   Additionally, we provide client libraries for following languages:   Clojure  Javascript  Python  Ruby   This part of the Knowledge Base will detail into the starter kit. It will cover how to set up data stream on iOS and android and explain about the coding guidelines.", 
            "title": "Starter Kit"
        }, 
        {
            "location": "/StarterKit/index.html#general_guidelines", 
            "text": "These are very general guidelines to implement Octomatic data stream for any platform. Although the examples are specific to ios, android; they can be implemented on any system that allows for following data points.  To begin with your app should be enabled for following user permissions:   Access location while app is running in foreground  Able to recieve push notification from a server authenticated with your credentials. Chances are you are using one of these services:  Google Cloud Messaging (GCM)  Android  iOS    Apple Push Notification Service (APNS), iOS only  Able to retrieve device specific details such as  OS Version  Manufacturer  Device Unique ID  Able to connect to internet", 
            "title": "General Guidelines"
        }, 
        {
            "location": "/iOSAPNSStarterKit/index.html", 
            "text": "iOS, APNS Starter Kit\n\n\nThis kit covers an app published on iOS platform and uses Apple Push Notification Service (APNS) for push notifications.\n\n\n\n\n\n\niOS, APNS Starter Kit\n\n\nGet Started\n\n\nGithub Clone\n\n\nLibraries\n\n\n\n\n\n\nSetup Capabilities\n\n\nGeoLocation\n\n\nProvide an explanation for why location is being used\n\n\nLink to CoreLocation framework\n\n\n\n\n\n\nPush Notification\n\n\n\n\n\n\nSetup Octomatic Enterprise API\n\n\nAdd API Keys\n\n\nUpdate the API Endpoint (Optional)\n\n\n\n\n\n\nCode Implementation\n\n\nInitialising Octomatic API and handling callback\n\n\nUpdating user's location\n\n\nObjective C\n\n\nSwift\n\n\n\n\n\n\nSending out API calls\n\n\napp.init\n\n\napp.login\n\n\napp.logout\n\n\npage.view\n\n\nproductpage.view\n\n\n\n\n\n\nRegistering for remote notifications\n\n\nHandling remote notifications\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGet Started\n\n\nGithub Clone\n\n\nThe complete source code of this app is available at our Github. \nhttps://github.com/octoai/StarterKit-IOS-APNS\n. You should clone this and keep it ready for reference.\n\n\nYou can also \ndownload\n the starter kit from here. This starter kit contains a working sample of code that takes all permissions from users, and sends appropriate API calls at appropriate times.\n\n\nIf you already have an app, chances are most of the steps would have been already done. However, it is advised to go through the document and remove any inconsistencies.\n\n\nThe code snippets mentioned here can be found in the starter kit. Should you have any difficulty understaning the flow, the starter kit code should help you out.\n\n\nLibraries\n\n\nIf you just want to download the libraries for Octomatic API, choose your language below:\n\n\n\n\nObjective C API\n\n\nSwift API\n\n\n\n\nSetup Capabilities\n\n\nGeoLocation\n\n\n\n\nIn order to be able to use geolocation while app is running in foreground, you need to do the following steps:\n\n\nProvide an explanation for why location is being used\n\n\nCreate a key named \nNSLocationWhenInUseUsageDescription\n in \nInfo.plist\n. The string value of this key should be the description. By default, the description reads \"\nWe use geolocation to provide better recommendations\n\". You may change to a suitable text, if necessary.\n\n\nkey\nNSLocationWhenInUseUsageDescription\n/key\n\n\nstring\nWe use geolocation to provide better recommendations\n/string\n\n\n\n\n\nLink to CoreLocation framework\n\n\nGo to \nBuild Phases \n Link Binary with Libraries\n. Click on the \n+\n sign and select \nCoreLocation.framework\n from the list that comes.\n\n\nPush Notification\n\n\n\n\n\n\nFollow the apple developer's app distribution guide to \nconfigure push notifications\n for your app.\n\n\nSend an email to \napi@octo.ai\n along with the SSL certificates (in .p12) format. You should send us your development and production certificates.\n\n\n\n\nSetup Octomatic Enterprise API\n\n\nThe Octomatic Enterprise API contains following files\n\n\n\n\nSwift\n\n\nOctoAPI.swift\n\n\n\n\n\n\nObjective C\n\n\nOctoAPI.h\n\n\nOctoAPI.m\n\n\n\n\n\n\n\n\nCopy these files to your corresponding project's source directory.\n\n\nAdd API Keys\n\n\nOnce copied, you would require to add appropriate API Key and server key at the right places.\n\n\nObjective C\n\n\nOpen \nOctoAPI.m\n and you should see something like below. Update the \nAPIKEY\n with your Octomatic's Enterprise API Key. You should leave the \nSERVER_API_KEY\n as it is. It is required only for GCM.\n\n\n\n/*\n SET YOUR API KEY HERE\n You must manually set the API Key here\n */\nNSString *APIKEY = @\n;\n\n\n\n\n\nSwift\n\n\nOpen \nOctoAPI.swift\n and update \nAPIKEY\n with your Octomatic's Enterprise API Key. You should also update \nSERVER_API_KEY\n with the GCM server api key.\n\n\n\n/*\nUpdate your API KEY here.\n*/\nvar APIKEY = \n\n\n\n\n\n\nUpdate the API Endpoint (Optional)\n\n\nBy default, the API Endpoint points to production environment. Optionally, you can change this to sandbox endpoint for development purposes. If you need to do so, do it where \nBASEURL\n is defined.\n\n\nObjective C\n\n\n\nNSString *BASEURL = @\nhttp://192.168.0.109:8000\n;\n\n\n\n\n\nSwift\n\n\n\nvar BASEURL = \nhttp://192.168.0.109:8000\n\n\n\n\n\n\nModifying the API files any further should not be necessary. However, if you feel any need to do so, please contact us at api@octo.ai beforehand.\n\n\nCode Implementation\n\n\nThe following section will detail about the actual code implementation and is divided into following parts\n\n\n\n\nInitialising Octomatic API and handling callback\n\n\nUpdating user's registrationToken to Octomatic\n\n\nUpdating user's location\n\n\nSending out API calls\n\n\nHandling remote notifications\n\n\n\n\nInitialising Octomatic API and handling callback\n\n\nIn order to initialize Octomatic API import the API files, and initialize the client. The calls are made using \nNSUrlSession\n and are executed async. A callback can be associated with the request which gets executed with the response value. The response value is a string which contains the eventId of the API call. This eventId can always be used from the dashboard to trace an event.\n\n\nIn the following example, an \napp.init\n call is made for a user with ID as 2. In the callback, the response is logged to console.\n\n\nObjective C\n\n\n\n#import \nOctoAPI.h\n\n\n\n// somewhere in the code\nOctoAPI *api = [[OctoAPI alloc] init];\n\nNSInteger userId = 2;\n[api sendAppInitCall:userId\n        onCompletion: ^(NSString* response){\n            NSLog(@\nGot response from App.Init %@\n,\n            response);\n          }];\n\n\n\n\n\nSwift\n\n\n\nlet api = OctoAPI()\nlet userId = 2\n\napi.sendAppInitCall(userId) { (result) -\n Void in\n    print(result)\n}\n\n\n\n\n\nUpdating user's location\n\n\nObjective C\n\n\nInclude the CoreLocation framework in \nAppDelegate.h\n header file. Also add a property \nlocationManager\n to AppDelegate interface\n\n\n\n#import \nUIKit/UIKit.h\n\n#import \nCoreData/CoreData.h\n\n#import \nCoreLocation/CoreLocation.h\n\n\n@interface AppDelegate : UIResponder \nUIApplicationDelegate\n\n\n\n\n@property (strong, nonatomic) UIWindow *window;\n\n@property (readonly, strong, nonatomic) NSManagedObjectContext *managedObjectContext;\n@property (readonly, strong, nonatomic) NSManagedObjectModel *managedObjectModel;\n@property (readonly, strong, nonatomic) NSPersistentStoreCoordinator *persistentStoreCoordinator;\n@property (nonatomic, retain) CLLocationManager *locationManager;\n\n\n- (void)saveContext;\n- (NSURL *)applicationDocumentsDirectory;\n\n\n@end\n\n\n\n\n\nRequesting Geolocation from user should be done when the app finishes launching. Typically, this could be in \nAppDelegate.m\n's \ndidFinishLaunchingWithOptions\n function.\n\n\n\n- (BOOL)application:(UIApplication *)application\n      didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n\n    // Get geolocation permissions from user\n    if (![CLLocationManager locationServicesEnabled]) {\n        NSLog(@\nDisabled\n);\n        // location services is disabled, alert user\n        UIAlertView *servicesDisabledAlert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@\nDisabledTitle\n, @\nDisabledTitle\n)\n                                                                        message:NSLocalizedString(@\nDisabledMessage\n, @\nDisabledMessage\n)\n                                                                       delegate:nil\n                                                              cancelButtonTitle:NSLocalizedString(@\nOKButtonTitle\n, @\nOKButtonTitle\n)\n                                                              otherButtonTitles:nil];\n        [servicesDisabledAlert show];\n    }\n    else\n    {\n        self.locationManager = [[CLLocationManager alloc] init];\n        self.locationManager.delegate = self;\n        if ([self.locationManager respondsToSelector:@selector(requestWhenInUseAuthorization)]) {\n            [self.locationManager requestWhenInUseAuthorization];\n        }\n        [self.locationManager startUpdatingLocation];\n        NSLog(@\nNot Disabled\n);\n    }\n}\n\n\n\n\n\nOnce the permissions to get geolocation from user is available, then add a delegate method that would update the location to Octomatic's API. Not that this does not necessarily mean an API call. It just means that the next API call happening would include the updated location of the user.\n\n\nThis should typically reside in \nAppDelegate.m\n\n\n\n- (void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray *)locations\n{\n    [OctoAPI updateLocation:locations];\n}\n\n\n\n\n\nSwift\n\n\nImport the required framework in \nViewController.swift\n and add it's delegate\n\n\n\nimport CoreLocation\n\nclass ViewController: UIViewController, CLLocationManagerDelegate {\n\n    var locationManager: CLLocationManager!\n\n    // ...\n}\n\n\n\n\n\nAsk for authorization when the view loads\n\n\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n\n    locationManager = CLLocationManager()\n    locationManager.delegate = self\n    locationManager.requestWhenInUseAuthorization()\n\n}\n\n\n\n\n\nUpdate Octo API about new locations when they happen. This does not necessarily mean making an API call to Octomatic's endpoint. It only means that the next API call will happen with the new location that is available.\n\n\n\nfunc locationManager(manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n    OctoAPI.updateLocation(locations)\n}\n\nfunc locationManager(manager: CLLocationManager, didFailWithError error: NSError) {\n    print(\ndidFailWithError: \\(error.description)\n)\n\n}\nfunc locationManager(manager: CLLocationManager, didChangeAuthorizationStatus status: CLAuthorizationStatus) {\n    if status == .AuthorizedWhenInUse {\n        locationManager.startUpdatingLocation()\n    }\n    if status == .AuthorizedAlways {\n        if CLLocationManager.isMonitoringAvailableForClass(CLBeaconRegion.self) {\n            if CLLocationManager.isRangingAvailable() {\n                // do stuff\n            }\n        }\n    }\n}\n\n\n\n\n\nSending out API calls\n\n\napp.init\n\n\n\n\nThis call should be made everytime the app comes to foreground. Place the code inside \napplicationDidBecomeActive\n function in \nappdelegate\n file. There could be potentially more stuff inside it. Make sure to add it to the last of all the other things happening.\n\n\nObjective C (AppDelegate.m)\n\n\n\n// [START connect_gcm_service]\n- (void)applicationDidBecomeActive:(UIApplication *)application {\n\n    // Authenticate the user\n    NSInteger userId = 2;\n\n    // Send app.init call to Octomatic\n    OctoAPI *api = [[OctoAPI alloc] init];\n    [api sendAppInitCall:userId onCompletion: ^(NSString* response){\n        NSLog(@\nGot response from App.Init %@\n, response);\n    }];\n\n}\n\n\n\n\n\nSwift (AppDelegate.swift)\n\n\n\nfunc applicationDidBecomeActive( application: UIApplication) {\n\n    // authenticate the user\n    let userId = 2\n\n    // send App Init API Call to Octo\n    let api = OctoAPI()\n    api.sendAppInitCall(userId) { (result) -\n Void in\n        print(\nApp.Init result\n, result)\n    }\n}\n\n\n\n\n\napp.login\n\n\n\n\nThis call should be made everytime an un-authenticated user authenticates themselves and logs into the system. Place this at your login callback function.\n\n\nIn the starter kit, these calls are placed in \nViewController\n files. They are triggered by corresponding button actions.\n\n\nObjective C\n\n\n\n// user who just logged in\nNSInteger userId = 2;\n\nOctoAPI *api = [[OctoAPI alloc] init];\n[api sendAppLoginCall:userId  onCompletion: ^(NSString* response){\n    NSLog(@\nGot response from App.Login %@\n, response);\n\n    // Possibly store this response for tracing it\n}];\n\n\n\n\n\nSwift\n\n\n\n// authenticate the user\n\nlet userId = 2\n\nlet api = OctoAPI()\napi.sendAppLoginCall(userId) { (result) -\n Void in\n    // do something with the response.\n    // possibly store it for tracing/debugging purposes\n    print(result)\n}\n\n\n\n\n\napp.logout\n\n\n\n\nThis call should be made everytime a user chooses to logout from the system. Place this call just before the logout action happens.\n\n\nIn the starter kit, these calls are placed in \nViewController\n files. They are triggered by corresponding button actions.\n\n\nObjective C\n\n\n\n// user who is logging out\nNSInteger userId = 2;\n\nOctoAPI *api = [[OctoAPI alloc] init];\n[api sendAppLogoutCall:userId  onCompletion: ^(NSString* response){\n    NSLog(@\nGot response from App.Logout %@\n, response);\n\n    // Possibly store this response for tracing it\n}]\n\n\n\n\n\nSwift\n\n\n\nlet userId = 2\n\nlet api = OctoAPI()\napi.sendAppLogoutCall(userId) { (result) -\n Void in\n    // do something with the response.\n    // possibly store it for tracing/debugging purposes\n    print(result)\n}\n\n\n\n\n\npage.view\n\n\n\n\nThis call should be send upon every page view call happening. A pageview is said to happen when a user is browsing any page that is \nnot a product page\n. Product pages are handled separately by a \nproductpage.view\n call.\n\n\nIn the starter kit, these calls are placed in \nViewController\n files. They are triggered by corresponding button actions.\n\n\nObjective C\n\n\n\n// authenticated user who is viewing the page\nNSInteger userId = 2;\n\n// Symbolic URL (or other unique identifier)\n// for the page being viewed\nNSString *routeUrl = @\nHome#Index\n;\n\n// Categories this page belongs to\nNSArray *categories = @[@\nAldo\n, @\nWomen\n];\n\n// Tags that belong to the page\nNSArray *tags = @[@\nRed\n, @\nHandbag\n, @\nLeather\n];\n\nOctoAPI *api = [[OctoAPI alloc] init];\n[api sendPageViewCall:userId\n                routeUrl:routeUrl\n           categories:categories\n                 tags:tags\n         onCompletion: ^(NSString* response){\n             NSLog(@\nGot response from Page.View %@\n, response);\n     }];\n\n\n\n\n\nSwift\n\n\n\n// Symbolic URL (or other unique identifier)\n// for the page being viewed\nlet routeUrl = \n/Home\n\n\n// Categories this page belongs to\nlet categories = [\nsomething\n, \nsomething else\n]\n\n// Tags that belong to the page\nlet tags = [\ncat1\n, \ncat2\n]\n\n// authenticated user who is viewing the page\nlet userId = 2\n\nlet api = OctoAPI() \napi.sendPageViewCall(userId, routeUrl: routeUrl,\n    categories: categories, tags: tags) { (result) -\n Void in\n        self.showAPIResult(result)\n}\n\n\n\n\n\nproductpage.view\n\n\n\n\nThis call should be sent on every product pageview. This call differs from the \npage.view\n call.\n\n\nIn the starter kit, these calls are placed in \nViewController\n files. They are triggered by corresponding button actions.\n\n\nObjective C\n\n\n\n// authenticated user who is viewing the page\nNSInteger userId = 2;\n\n// Symbolic URL (or other unique identifier)\n// for the page being viewed\nNSString *routeUrl = @\nHome#Index\n;\n\n// id of the product\nNSInteger pid = 8263243\n\n// name of the product\nNSString* name = @\nSmartPhone Series S10\n;\n\n// price of the product\ndouble price = 899.99;\n\n// Categories this page belongs to\nNSArray *categories = @[@\nAldo\n, @\nWomen\n];\n\n// Tags that belong to the page\nNSArray *tags = @[@\nRed\n, @\nHandbag\n, @\nLeather\n];\n\nOctoAPI *api = [[OctoAPI alloc] init];\n    [api sendProductPageViewCall:userId\n                        routeUrl:routeUrl\n                       productId:pid\n                     productName:name\n                           price:price\n                      categories:categories\n                            tags:tags\n                    onCompletion: ^(NSString* response){\n                        NSLog(@\nGot response from Productpage.view %@\n,\n                        response);\n                    }\n     ];\n\n\n\n\n\nSwift\n\n\n\n// authenticated user who is viewing this product\nlet userId = 4\n\n// Symbolic URL (or other unique identifier)\n// for the page being viewed\nlet routeUrl = \n/Home/Phone\n\n\n// name of the product being viewed\nlet productName = \nSmartphone Series S02\n\n\n// price of the product\nlet price = 999.00\n\n// ID of the product\nlet productId = 635373\n\n// categories this product belongs to\nlet categories = [\nelectronics\n, \nphones\n]\n\n// tags that belong to this product\nlet tags = [\nselfie\n, \ncheap\n]\n\nlet api = OctoAPI() \napi.sendProductPageViewCall(userId, routeUrl: routeUrl,\n    productId: productId, price: price, productName: productName,\n    categories: categories, tags: tags) { (result) -\n Void in\n        print(result)\n}\n\n\n\n\n\nRegistering for remote notifications\n\n\nObjective C (AppDelegate.m)\n\n\nPut the following inside \ndidFinishLaunchingWithOptions\n so as to ask permissions about push notifications.\n\n\n// Get Push Notifications permissions from user\nif (floor(NSFoundationVersionNumber) \n= NSFoundationVersionNumber_iOS_7_1) {\n    // iOS 7.1 or earlier\n    UIRemoteNotificationType allNotificationTypes =\n    (UIRemoteNotificationTypeSound | UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeBadge);\n    [application registerForRemoteNotificationTypes:allNotificationTypes];\n} else {\n    // iOS 8 or later\n    // [END_EXCLUDE]\n    UIUserNotificationType allNotificationTypes =\n    (UIUserNotificationTypeSound | UIUserNotificationTypeAlert | UIUserNotificationTypeBadge);\n    UIUserNotificationSettings *settings =\n    [UIUserNotificationSettings settingsForTypes:allNotificationTypes categories:nil];\n    [[UIApplication sharedApplication] registerUserNotificationSettings:settings];\n    [[UIApplication sharedApplication] registerForRemoteNotifications];\n}\n\n\n\n\nThe following functions check the status of push notifications permissions and appropriately handle the situation. If it is a success asking for permissions, updates Octo with the push Token of the user.\n\n\n- (void)application:(UIApplication*)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData*)deviceToken\n{\n    const unsigned *tokenBytes = [deviceToken bytes];\n    NSString *hexToken = [NSString stringWithFormat:@\n%08x%08x%08x%08x%08x%08x%08x%08x\n,\n                          ntohl(tokenBytes[0]), ntohl(tokenBytes[1]), ntohl(tokenBytes[2]),\n                          ntohl(tokenBytes[3]), ntohl(tokenBytes[4]), ntohl(tokenBytes[5]),\n                          ntohl(tokenBytes[6]), ntohl(tokenBytes[7])];\n    NSLog(@\nMy token is: %@\n, hexToken);\n\n\n    // update the token to Octo\n    OctoAPI *api = [[OctoAPI alloc] init];\n    [api updatePushToken:2 pushToken:hexToken  onCompletion: ^(NSString* response){\n        NSLog(@\nGot response from Push Token %@\n, response);\n    }];\n\n\n}\n\n- (void)application:(UIApplication*)application didFailToRegisterForRemoteNotificationsWithError:(NSError*)error\n{\n     NSLog(@\nFailed to get token, error: %@\n, error);\n}\n\n\n\n\n\nSwift (ViewController.swift)\n\n\nThe following will ask for push notifications permissions from the user.\n\n\nlet settings = UIUserNotificationSettings(forTypes: [.Sound, .Alert, .Badge], categories: nil)\nUIApplication.sharedApplication().registerUserNotificationSettings(settings)\n\n\n\n\nInside the \nAppDelegate.swift\n do the handler functions for success or failure of the permissions.\n\n\nfunc application(application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: NSData) {\n\n    let characterSet: NSCharacterSet = NSCharacterSet( charactersInString: \n )\n    let deviceTokenString = ( deviceToken.description as NSString )\n        .stringByTrimmingCharactersInSet( characterSet )\n        .stringByReplacingOccurrencesOfString( \n \n, withString: \n ) as String\n\n        // Update to Octomatic\n\n    let api = OctoAPI()\n    api.sendPushToken(5, pushToken: deviceTokenString) { (result) -\n Void in\n        print(\nPush Token Response\n, result)\n    }\n}\n\nfunc application(application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: NSError) {\n    print(\nDevice token for push notifications: FAIL -- \n)\n    print(error.description)\n}\n\n\n\n\nHandling remote notifications\n\n\nIn order to inform the user about an incoming remote notification, the appropriate \ndidReceiveRemoteNotification\n call needs to be worked upon. Here is how you can do it:\n\n\nObjective C (AppDelegate.m)\n\n\n- (void)application:(UIApplication *)application\ndidReceiveRemoteNotification:(NSDictionary *)userInfo\nfetchCompletionHandler:(void (^)(UIBackgroundFetchResult))handler {\n\n    if (application.applicationState == UIApplicationStateActive) {\n        NSLog(@\nApp In foreground\n);\n\n        if ([UIAlertController class])\n        {\n            UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@\nAlert title\n\n                                                                                     message:@\nAlert message\n\n                                                                              preferredStyle:UIAlertControllerStyleAlert];\n            UIAlertAction* ok = [UIAlertAction actionWithTitle:@\nOK\n style:UIAlertActionStyleDefault handler:nil];\n            [alertController addAction:ok];\n\n//            [self presentViewController:alertController animated:YES completion:nil];\n        }\n        else\n        {\n            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@\nPush Notification\n message:userInfo[@\naps\n][@\nalert\n] delegate:nil cancelButtonTitle:@\nOK\n otherButtonTitles:nil];\n            [alertView show];\n        }\n\n\n    }\n    else if (application.applicationState == UIApplicationStateBackground || application.applicationState == UIApplicationStateInactive) {\n        NSLog(@\nApp in background\n);\n        // Do something else rather than showing an alert view, because it won't be displayed.\n\n        NSLog(@\nNotification 2 received: %@\n, userInfo);\n        [[NSNotificationCenter defaultCenter] postNotificationName:@\nAPNS ObjC\n\n                                                            object:nil\n                                                          userInfo:userInfo];\n        handler(UIBackgroundFetchResultNewData);\n\n        NSLog(@\nDone with notification stuff.\n);\n    }\n\n\n}\n\n\n\n\nSwift (AppDelegate.swift)\n\n\n    func application(application: UIApplication, didReceiveRemoteNotification userInfo: [NSObject : AnyObject]) {\n\n        print(\nRecived: \\(userInfo)\n)\n        // do something if you want to do with this message\n    }", 
            "title": "iOS, APNS"
        }, 
        {
            "location": "/iOSAPNSStarterKit/index.html#ios_apns_starter_kit", 
            "text": "This kit covers an app published on iOS platform and uses Apple Push Notification Service (APNS) for push notifications.    iOS, APNS Starter Kit  Get Started  Github Clone  Libraries    Setup Capabilities  GeoLocation  Provide an explanation for why location is being used  Link to CoreLocation framework    Push Notification    Setup Octomatic Enterprise API  Add API Keys  Update the API Endpoint (Optional)    Code Implementation  Initialising Octomatic API and handling callback  Updating user's location  Objective C  Swift    Sending out API calls  app.init  app.login  app.logout  page.view  productpage.view    Registering for remote notifications  Handling remote notifications", 
            "title": "iOS, APNS Starter Kit"
        }, 
        {
            "location": "/iOSAPNSStarterKit/index.html#get_started", 
            "text": "", 
            "title": "Get Started"
        }, 
        {
            "location": "/iOSAPNSStarterKit/index.html#github_clone", 
            "text": "The complete source code of this app is available at our Github.  https://github.com/octoai/StarterKit-IOS-APNS . You should clone this and keep it ready for reference.  You can also  download  the starter kit from here. This starter kit contains a working sample of code that takes all permissions from users, and sends appropriate API calls at appropriate times.  If you already have an app, chances are most of the steps would have been already done. However, it is advised to go through the document and remove any inconsistencies.  The code snippets mentioned here can be found in the starter kit. Should you have any difficulty understaning the flow, the starter kit code should help you out.", 
            "title": "Github Clone"
        }, 
        {
            "location": "/iOSAPNSStarterKit/index.html#libraries", 
            "text": "If you just want to download the libraries for Octomatic API, choose your language below:   Objective C API  Swift API", 
            "title": "Libraries"
        }, 
        {
            "location": "/iOSAPNSStarterKit/index.html#setup_capabilities", 
            "text": "", 
            "title": "Setup Capabilities"
        }, 
        {
            "location": "/iOSAPNSStarterKit/index.html#geolocation", 
            "text": "In order to be able to use geolocation while app is running in foreground, you need to do the following steps:", 
            "title": "GeoLocation"
        }, 
        {
            "location": "/iOSAPNSStarterKit/index.html#provide_an_explanation_for_why_location_is_being_used", 
            "text": "Create a key named  NSLocationWhenInUseUsageDescription  in  Info.plist . The string value of this key should be the description. By default, the description reads \" We use geolocation to provide better recommendations \". You may change to a suitable text, if necessary.  key NSLocationWhenInUseUsageDescription /key  string We use geolocation to provide better recommendations /string", 
            "title": "Provide an explanation for why location is being used"
        }, 
        {
            "location": "/iOSAPNSStarterKit/index.html#link_to_corelocation_framework", 
            "text": "Go to  Build Phases   Link Binary with Libraries . Click on the  +  sign and select  CoreLocation.framework  from the list that comes.", 
            "title": "Link to CoreLocation framework"
        }, 
        {
            "location": "/iOSAPNSStarterKit/index.html#push_notification", 
            "text": "Follow the apple developer's app distribution guide to  configure push notifications  for your app.  Send an email to  api@octo.ai  along with the SSL certificates (in .p12) format. You should send us your development and production certificates.", 
            "title": "Push Notification"
        }, 
        {
            "location": "/iOSAPNSStarterKit/index.html#setup_octomatic_enterprise_api", 
            "text": "The Octomatic Enterprise API contains following files   Swift  OctoAPI.swift    Objective C  OctoAPI.h  OctoAPI.m     Copy these files to your corresponding project's source directory.", 
            "title": "Setup Octomatic Enterprise API"
        }, 
        {
            "location": "/iOSAPNSStarterKit/index.html#add_api_keys", 
            "text": "Once copied, you would require to add appropriate API Key and server key at the right places.  Objective C  Open  OctoAPI.m  and you should see something like below. Update the  APIKEY  with your Octomatic's Enterprise API Key. You should leave the  SERVER_API_KEY  as it is. It is required only for GCM.  \n/*\n SET YOUR API KEY HERE\n You must manually set the API Key here\n */\nNSString *APIKEY = @ ;  Swift  Open  OctoAPI.swift  and update  APIKEY  with your Octomatic's Enterprise API Key. You should also update  SERVER_API_KEY  with the GCM server api key.  \n/*\nUpdate your API KEY here.\n*/\nvar APIKEY =", 
            "title": "Add API Keys"
        }, 
        {
            "location": "/iOSAPNSStarterKit/index.html#update_the_api_endpoint_optional", 
            "text": "By default, the API Endpoint points to production environment. Optionally, you can change this to sandbox endpoint for development purposes. If you need to do so, do it where  BASEURL  is defined.  Objective C  \nNSString *BASEURL = @ http://192.168.0.109:8000 ;  Swift  \nvar BASEURL =  http://192.168.0.109:8000   Modifying the API files any further should not be necessary. However, if you feel any need to do so, please contact us at api@octo.ai beforehand.", 
            "title": "Update the API Endpoint (Optional)"
        }, 
        {
            "location": "/iOSAPNSStarterKit/index.html#code_implementation", 
            "text": "The following section will detail about the actual code implementation and is divided into following parts   Initialising Octomatic API and handling callback  Updating user's registrationToken to Octomatic  Updating user's location  Sending out API calls  Handling remote notifications", 
            "title": "Code Implementation"
        }, 
        {
            "location": "/iOSAPNSStarterKit/index.html#initialising_octomatic_api_and_handling_callback", 
            "text": "In order to initialize Octomatic API import the API files, and initialize the client. The calls are made using  NSUrlSession  and are executed async. A callback can be associated with the request which gets executed with the response value. The response value is a string which contains the eventId of the API call. This eventId can always be used from the dashboard to trace an event.  In the following example, an  app.init  call is made for a user with ID as 2. In the callback, the response is logged to console.  Objective C  \n#import  OctoAPI.h \n\n\n// somewhere in the code\nOctoAPI *api = [[OctoAPI alloc] init];\n\nNSInteger userId = 2;\n[api sendAppInitCall:userId\n        onCompletion: ^(NSString* response){\n            NSLog(@ Got response from App.Init %@ ,\n            response);\n          }];  Swift  \nlet api = OctoAPI()\nlet userId = 2\n\napi.sendAppInitCall(userId) { (result) -  Void in\n    print(result)\n}", 
            "title": "Initialising Octomatic API and handling callback"
        }, 
        {
            "location": "/iOSAPNSStarterKit/index.html#updating_users_location", 
            "text": "", 
            "title": "Updating user's location"
        }, 
        {
            "location": "/iOSAPNSStarterKit/index.html#objective_c", 
            "text": "Include the CoreLocation framework in  AppDelegate.h  header file. Also add a property  locationManager  to AppDelegate interface  \n#import  UIKit/UIKit.h \n#import  CoreData/CoreData.h \n#import  CoreLocation/CoreLocation.h \n\n@interface AppDelegate : UIResponder  UIApplicationDelegate \n\n\n\n@property (strong, nonatomic) UIWindow *window;\n\n@property (readonly, strong, nonatomic) NSManagedObjectContext *managedObjectContext;\n@property (readonly, strong, nonatomic) NSManagedObjectModel *managedObjectModel;\n@property (readonly, strong, nonatomic) NSPersistentStoreCoordinator *persistentStoreCoordinator;\n@property (nonatomic, retain) CLLocationManager *locationManager;\n\n\n- (void)saveContext;\n- (NSURL *)applicationDocumentsDirectory;\n\n\n@end  Requesting Geolocation from user should be done when the app finishes launching. Typically, this could be in  AppDelegate.m 's  didFinishLaunchingWithOptions  function.  \n- (BOOL)application:(UIApplication *)application\n      didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n\n    // Get geolocation permissions from user\n    if (![CLLocationManager locationServicesEnabled]) {\n        NSLog(@ Disabled );\n        // location services is disabled, alert user\n        UIAlertView *servicesDisabledAlert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@ DisabledTitle , @ DisabledTitle )\n                                                                        message:NSLocalizedString(@ DisabledMessage , @ DisabledMessage )\n                                                                       delegate:nil\n                                                              cancelButtonTitle:NSLocalizedString(@ OKButtonTitle , @ OKButtonTitle )\n                                                              otherButtonTitles:nil];\n        [servicesDisabledAlert show];\n    }\n    else\n    {\n        self.locationManager = [[CLLocationManager alloc] init];\n        self.locationManager.delegate = self;\n        if ([self.locationManager respondsToSelector:@selector(requestWhenInUseAuthorization)]) {\n            [self.locationManager requestWhenInUseAuthorization];\n        }\n        [self.locationManager startUpdatingLocation];\n        NSLog(@ Not Disabled );\n    }\n}  Once the permissions to get geolocation from user is available, then add a delegate method that would update the location to Octomatic's API. Not that this does not necessarily mean an API call. It just means that the next API call happening would include the updated location of the user.  This should typically reside in  AppDelegate.m  \n- (void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray *)locations\n{\n    [OctoAPI updateLocation:locations];\n}", 
            "title": "Objective C"
        }, 
        {
            "location": "/iOSAPNSStarterKit/index.html#swift", 
            "text": "Import the required framework in  ViewController.swift  and add it's delegate  \nimport CoreLocation\n\nclass ViewController: UIViewController, CLLocationManagerDelegate {\n\n    var locationManager: CLLocationManager!\n\n    // ...\n}  Ask for authorization when the view loads  \noverride func viewDidLoad() {\n    super.viewDidLoad()\n\n    locationManager = CLLocationManager()\n    locationManager.delegate = self\n    locationManager.requestWhenInUseAuthorization()\n\n}  Update Octo API about new locations when they happen. This does not necessarily mean making an API call to Octomatic's endpoint. It only means that the next API call will happen with the new location that is available.  \nfunc locationManager(manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n    OctoAPI.updateLocation(locations)\n}\n\nfunc locationManager(manager: CLLocationManager, didFailWithError error: NSError) {\n    print( didFailWithError: \\(error.description) )\n\n}\nfunc locationManager(manager: CLLocationManager, didChangeAuthorizationStatus status: CLAuthorizationStatus) {\n    if status == .AuthorizedWhenInUse {\n        locationManager.startUpdatingLocation()\n    }\n    if status == .AuthorizedAlways {\n        if CLLocationManager.isMonitoringAvailableForClass(CLBeaconRegion.self) {\n            if CLLocationManager.isRangingAvailable() {\n                // do stuff\n            }\n        }\n    }\n}", 
            "title": "Swift"
        }, 
        {
            "location": "/iOSAPNSStarterKit/index.html#sending_out_api_calls", 
            "text": "", 
            "title": "Sending out API calls"
        }, 
        {
            "location": "/iOSAPNSStarterKit/index.html#appinit", 
            "text": "This call should be made everytime the app comes to foreground. Place the code inside  applicationDidBecomeActive  function in  appdelegate  file. There could be potentially more stuff inside it. Make sure to add it to the last of all the other things happening.  Objective C (AppDelegate.m)  \n// [START connect_gcm_service]\n- (void)applicationDidBecomeActive:(UIApplication *)application {\n\n    // Authenticate the user\n    NSInteger userId = 2;\n\n    // Send app.init call to Octomatic\n    OctoAPI *api = [[OctoAPI alloc] init];\n    [api sendAppInitCall:userId onCompletion: ^(NSString* response){\n        NSLog(@ Got response from App.Init %@ , response);\n    }];\n\n}  Swift (AppDelegate.swift)  \nfunc applicationDidBecomeActive( application: UIApplication) {\n\n    // authenticate the user\n    let userId = 2\n\n    // send App Init API Call to Octo\n    let api = OctoAPI()\n    api.sendAppInitCall(userId) { (result) -  Void in\n        print( App.Init result , result)\n    }\n}", 
            "title": "app.init"
        }, 
        {
            "location": "/iOSAPNSStarterKit/index.html#applogin", 
            "text": "This call should be made everytime an un-authenticated user authenticates themselves and logs into the system. Place this at your login callback function.  In the starter kit, these calls are placed in  ViewController  files. They are triggered by corresponding button actions.  Objective C  \n// user who just logged in\nNSInteger userId = 2;\n\nOctoAPI *api = [[OctoAPI alloc] init];\n[api sendAppLoginCall:userId  onCompletion: ^(NSString* response){\n    NSLog(@ Got response from App.Login %@ , response);\n\n    // Possibly store this response for tracing it\n}];  Swift  \n// authenticate the user\n\nlet userId = 2\n\nlet api = OctoAPI()\napi.sendAppLoginCall(userId) { (result) -  Void in\n    // do something with the response.\n    // possibly store it for tracing/debugging purposes\n    print(result)\n}", 
            "title": "app.login"
        }, 
        {
            "location": "/iOSAPNSStarterKit/index.html#applogout", 
            "text": "This call should be made everytime a user chooses to logout from the system. Place this call just before the logout action happens.  In the starter kit, these calls are placed in  ViewController  files. They are triggered by corresponding button actions.  Objective C  \n// user who is logging out\nNSInteger userId = 2;\n\nOctoAPI *api = [[OctoAPI alloc] init];\n[api sendAppLogoutCall:userId  onCompletion: ^(NSString* response){\n    NSLog(@ Got response from App.Logout %@ , response);\n\n    // Possibly store this response for tracing it\n}]  Swift  \nlet userId = 2\n\nlet api = OctoAPI()\napi.sendAppLogoutCall(userId) { (result) -  Void in\n    // do something with the response.\n    // possibly store it for tracing/debugging purposes\n    print(result)\n}", 
            "title": "app.logout"
        }, 
        {
            "location": "/iOSAPNSStarterKit/index.html#pageview", 
            "text": "This call should be send upon every page view call happening. A pageview is said to happen when a user is browsing any page that is  not a product page . Product pages are handled separately by a  productpage.view  call.  In the starter kit, these calls are placed in  ViewController  files. They are triggered by corresponding button actions.  Objective C  \n// authenticated user who is viewing the page\nNSInteger userId = 2;\n\n// Symbolic URL (or other unique identifier)\n// for the page being viewed\nNSString *routeUrl = @ Home#Index ;\n\n// Categories this page belongs to\nNSArray *categories = @[@ Aldo , @ Women ];\n\n// Tags that belong to the page\nNSArray *tags = @[@ Red , @ Handbag , @ Leather ];\n\nOctoAPI *api = [[OctoAPI alloc] init];\n[api sendPageViewCall:userId\n                routeUrl:routeUrl\n           categories:categories\n                 tags:tags\n         onCompletion: ^(NSString* response){\n             NSLog(@ Got response from Page.View %@ , response);\n     }];  Swift  \n// Symbolic URL (or other unique identifier)\n// for the page being viewed\nlet routeUrl =  /Home \n\n// Categories this page belongs to\nlet categories = [ something ,  something else ]\n\n// Tags that belong to the page\nlet tags = [ cat1 ,  cat2 ]\n\n// authenticated user who is viewing the page\nlet userId = 2\n\nlet api = OctoAPI() \napi.sendPageViewCall(userId, routeUrl: routeUrl,\n    categories: categories, tags: tags) { (result) -  Void in\n        self.showAPIResult(result)\n}", 
            "title": "page.view"
        }, 
        {
            "location": "/iOSAPNSStarterKit/index.html#productpageview", 
            "text": "This call should be sent on every product pageview. This call differs from the  page.view  call.  In the starter kit, these calls are placed in  ViewController  files. They are triggered by corresponding button actions.  Objective C  \n// authenticated user who is viewing the page\nNSInteger userId = 2;\n\n// Symbolic URL (or other unique identifier)\n// for the page being viewed\nNSString *routeUrl = @ Home#Index ;\n\n// id of the product\nNSInteger pid = 8263243\n\n// name of the product\nNSString* name = @ SmartPhone Series S10 ;\n\n// price of the product\ndouble price = 899.99;\n\n// Categories this page belongs to\nNSArray *categories = @[@ Aldo , @ Women ];\n\n// Tags that belong to the page\nNSArray *tags = @[@ Red , @ Handbag , @ Leather ];\n\nOctoAPI *api = [[OctoAPI alloc] init];\n    [api sendProductPageViewCall:userId\n                        routeUrl:routeUrl\n                       productId:pid\n                     productName:name\n                           price:price\n                      categories:categories\n                            tags:tags\n                    onCompletion: ^(NSString* response){\n                        NSLog(@ Got response from Productpage.view %@ ,\n                        response);\n                    }\n     ];  Swift  \n// authenticated user who is viewing this product\nlet userId = 4\n\n// Symbolic URL (or other unique identifier)\n// for the page being viewed\nlet routeUrl =  /Home/Phone \n\n// name of the product being viewed\nlet productName =  Smartphone Series S02 \n\n// price of the product\nlet price = 999.00\n\n// ID of the product\nlet productId = 635373\n\n// categories this product belongs to\nlet categories = [ electronics ,  phones ]\n\n// tags that belong to this product\nlet tags = [ selfie ,  cheap ]\n\nlet api = OctoAPI() \napi.sendProductPageViewCall(userId, routeUrl: routeUrl,\n    productId: productId, price: price, productName: productName,\n    categories: categories, tags: tags) { (result) -  Void in\n        print(result)\n}", 
            "title": "productpage.view"
        }, 
        {
            "location": "/iOSAPNSStarterKit/index.html#registering_for_remote_notifications", 
            "text": "Objective C (AppDelegate.m)  Put the following inside  didFinishLaunchingWithOptions  so as to ask permissions about push notifications.  // Get Push Notifications permissions from user\nif (floor(NSFoundationVersionNumber)  = NSFoundationVersionNumber_iOS_7_1) {\n    // iOS 7.1 or earlier\n    UIRemoteNotificationType allNotificationTypes =\n    (UIRemoteNotificationTypeSound | UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeBadge);\n    [application registerForRemoteNotificationTypes:allNotificationTypes];\n} else {\n    // iOS 8 or later\n    // [END_EXCLUDE]\n    UIUserNotificationType allNotificationTypes =\n    (UIUserNotificationTypeSound | UIUserNotificationTypeAlert | UIUserNotificationTypeBadge);\n    UIUserNotificationSettings *settings =\n    [UIUserNotificationSettings settingsForTypes:allNotificationTypes categories:nil];\n    [[UIApplication sharedApplication] registerUserNotificationSettings:settings];\n    [[UIApplication sharedApplication] registerForRemoteNotifications];\n}  The following functions check the status of push notifications permissions and appropriately handle the situation. If it is a success asking for permissions, updates Octo with the push Token of the user.  - (void)application:(UIApplication*)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData*)deviceToken\n{\n    const unsigned *tokenBytes = [deviceToken bytes];\n    NSString *hexToken = [NSString stringWithFormat:@ %08x%08x%08x%08x%08x%08x%08x%08x ,\n                          ntohl(tokenBytes[0]), ntohl(tokenBytes[1]), ntohl(tokenBytes[2]),\n                          ntohl(tokenBytes[3]), ntohl(tokenBytes[4]), ntohl(tokenBytes[5]),\n                          ntohl(tokenBytes[6]), ntohl(tokenBytes[7])];\n    NSLog(@ My token is: %@ , hexToken);\n\n\n    // update the token to Octo\n    OctoAPI *api = [[OctoAPI alloc] init];\n    [api updatePushToken:2 pushToken:hexToken  onCompletion: ^(NSString* response){\n        NSLog(@ Got response from Push Token %@ , response);\n    }];\n\n\n}\n\n- (void)application:(UIApplication*)application didFailToRegisterForRemoteNotificationsWithError:(NSError*)error\n{\n     NSLog(@ Failed to get token, error: %@ , error);\n}  Swift (ViewController.swift)  The following will ask for push notifications permissions from the user.  let settings = UIUserNotificationSettings(forTypes: [.Sound, .Alert, .Badge], categories: nil)\nUIApplication.sharedApplication().registerUserNotificationSettings(settings)  Inside the  AppDelegate.swift  do the handler functions for success or failure of the permissions.  func application(application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: NSData) {\n\n    let characterSet: NSCharacterSet = NSCharacterSet( charactersInString:   )\n    let deviceTokenString = ( deviceToken.description as NSString )\n        .stringByTrimmingCharactersInSet( characterSet )\n        .stringByReplacingOccurrencesOfString(    , withString:   ) as String\n\n        // Update to Octomatic\n\n    let api = OctoAPI()\n    api.sendPushToken(5, pushToken: deviceTokenString) { (result) -  Void in\n        print( Push Token Response , result)\n    }\n}\n\nfunc application(application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: NSError) {\n    print( Device token for push notifications: FAIL --  )\n    print(error.description)\n}", 
            "title": "Registering for remote notifications"
        }, 
        {
            "location": "/iOSAPNSStarterKit/index.html#handling_remote_notifications", 
            "text": "In order to inform the user about an incoming remote notification, the appropriate  didReceiveRemoteNotification  call needs to be worked upon. Here is how you can do it:  Objective C (AppDelegate.m)  - (void)application:(UIApplication *)application\ndidReceiveRemoteNotification:(NSDictionary *)userInfo\nfetchCompletionHandler:(void (^)(UIBackgroundFetchResult))handler {\n\n    if (application.applicationState == UIApplicationStateActive) {\n        NSLog(@ App In foreground );\n\n        if ([UIAlertController class])\n        {\n            UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@ Alert title \n                                                                                     message:@ Alert message \n                                                                              preferredStyle:UIAlertControllerStyleAlert];\n            UIAlertAction* ok = [UIAlertAction actionWithTitle:@ OK  style:UIAlertActionStyleDefault handler:nil];\n            [alertController addAction:ok];\n\n//            [self presentViewController:alertController animated:YES completion:nil];\n        }\n        else\n        {\n            UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@ Push Notification  message:userInfo[@ aps ][@ alert ] delegate:nil cancelButtonTitle:@ OK  otherButtonTitles:nil];\n            [alertView show];\n        }\n\n\n    }\n    else if (application.applicationState == UIApplicationStateBackground || application.applicationState == UIApplicationStateInactive) {\n        NSLog(@ App in background );\n        // Do something else rather than showing an alert view, because it won't be displayed.\n\n        NSLog(@ Notification 2 received: %@ , userInfo);\n        [[NSNotificationCenter defaultCenter] postNotificationName:@ APNS ObjC \n                                                            object:nil\n                                                          userInfo:userInfo];\n        handler(UIBackgroundFetchResultNewData);\n\n        NSLog(@ Done with notification stuff. );\n    }\n\n\n}  Swift (AppDelegate.swift)      func application(application: UIApplication, didReceiveRemoteNotification userInfo: [NSObject : AnyObject]) {\n\n        print( Recived: \\(userInfo) )\n        // do something if you want to do with this message\n    }", 
            "title": "Handling remote notifications"
        }, 
        {
            "location": "/iOSGCMStarterKit/index.html", 
            "text": "iOS, GCM Starter Kit\n\n\nThis kit covers an app published on iOS platform and uses GCM for push notifications.\n\n\n\n\n\n\niOS, GCM Starter Kit\n\n\nGet Started\n\n\nGithub Clone\n\n\nLibraries\n\n\n\n\n\n\nSetup Capabilities\n\n\nGeoLocation\n\n\nProvide an explanation for why location is being used\n\n\nLink to CoreLocation framework\n\n\n\n\n\n\nPush Notification\n\n\nEnable Push Notifications\n\n\nGet the GCM config file\n\n\nAdd the configuration file to your project\n\n\n\n\n\n\n\n\n\n\nSetup Octomatic Enterprise API\n\n\nAdd API Keys\n\n\nUpdate the API Endpoint (Optional)\n\n\n\n\n\n\nCode Implementation\n\n\nInitialising Octomatic API and handling callback\n\n\nRegistering your app client with GCM\n\n\nUpdating user's registrationToken to Octomatic\n\n\nUpdating user's location\n\n\nObjective C\n\n\nSwift\n\n\n\n\n\n\nSending out API calls\n\n\napp.init\n\n\napp.login\n\n\napp.logout\n\n\npage.view\n\n\nproductpage.view\n\n\n\n\n\n\nRegistering for remote notifications\n\n\nHandling remote notifications\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGet Started\n\n\nGithub Clone\n\n\nThe complete source code of this app is available at our Github. \nhttps://github.com/octoai/StarterKit-IOS-GCM\n. You should clone this and keep it ready for reference.\n\n\nYou can also \ndownload\n the starter kit from here. This starter kit contains a working sample of code that takes all permissions from users, and sends appropriate API calls at appropriate times.\n\n\nIf you already have an app, chances are most of the steps would have been already done. However, it is advised to go through the document and remove any inconsistencies.\n\n\nThe code snippets mentioned here can be found in the starter kit. Should you have any difficulty understaning the flow, the starter kit code should help you out.\n\n\nLibraries\n\n\nIf you just want to download the libraries for Octomatic API, choose your language below:\n\n\n\n\nObjective C API\n\n\nSwift API\n\n\n\n\nSetup Capabilities\n\n\nGeoLocation\n\n\n\n\nIn order to be able to use geolocation while app is running in foreground, you need to do the following steps:\n\n\nProvide an explanation for why location is being used\n\n\nCreate a key named \nNSLocationWhenInUseUsageDescription\n in \nInfo.plist\n. The string value of this key should be the description. By default, the description reads \"\nWe use geolocation to provide better recommendations\n\". You may change to a suitable text, if necessary.\n\n\nkey\nNSLocationWhenInUseUsageDescription\n/key\n\n\nstring\nWe use geolocation to provide better recommendations\n/string\n\n\n\n\n\nLink to CoreLocation framework\n\n\nGo to \nBuild Phases \n Link Binary with Libraries\n. Click on the \n+\n sign and select \nCoreLocation.framework\n from the list that comes.\n\n\nPush Notification\n\n\n\n\nIn order to enable push notification on your app, you need to do the following:\n\n\nEnable Push Notifications\n\n\nSelect your build target and go to \nCapabilities\n tab. Turn on \nPush Notifications\n.\n\n\nGet the GCM config file\n\n\nYou would require a \nGoogleServices-Info.plist\n file for your project. In order to generate this file, you need to provide a valid APNs certificate and some additional information to get a configuration file and finish setting up your project. If you don't already have an APNs certificate, see \nProvisioning APNs SSL Certificates\n. When prompted, provide the Bundle ID associated with your APNs certificate.\n\n\nGet the configuration file for GCM\n.\n\n\nAfter you complete the configuration process, take note of the API server key on the download page, you will need it later. Download the GoogleServices-Info.plist file to add to your project.\n\n\nAdd the configuration file to your project\n\n\nDrag the \nGoogleService-Info.plist\n file you just downloaded into the root of your Xcode project and add it to all targets.\nIn Xcode, replace the bundle identifier for the GcmExample and GcmExampleSwift targets with the value associated with your APNs certificate. This must be the same value used in the Get a configuration file step.\n\n\nFor more detailed instructions, please follow the \nGCM iOS guide\n.\n\n\nSetup Octomatic Enterprise API\n\n\nThe Octomatic Enterprise API contains following files\n\n\n\n\nSwift\n\n\nOctoAPI.swift\n\n\n\n\n\n\nObjective C\n\n\nOctoAPI.h\n\n\nOctoAPI.m\n\n\n\n\n\n\n\n\nCopy these files to your corresponding project's source directory.\n\n\nAdd API Keys\n\n\nOnce copied, you would require to add appropriate API Key and server key at the right places.\n\n\nObjective C\n\n\nOpen \nOctoAPI.m\n and you should see something like below. Update the \nAPIKEY\n with your Octomatic's Enterprise API Key. You should also update \nSERVER_API_KEY\n with the GCM server api key.\n\n\n\n/*\n SET YOUR API KEY HERE\n You must manually set the API Key here\n */\nNSString *APIKEY = @\n;\n\n\n/*\nSET YOUR GCM SERVER API KEY HERE\n You must set the GCM SERVER API KEY so that push notifications can happen\n */\nNSString *SERVER_API_KEY = @\n;\n\n\n\n\n\nSwift\n\n\nOpen \nOctoAPI.swift\n and update \nAPIKEY\n with your Octomatic's Enterprise API Key. You should also update \nSERVER_API_KEY\n with the GCM server api key.\n\n\n\n/*\nUpdate your API KEY here.\n*/\nvar APIKEY = \n\n\n/*\nSET YOUR GCM SERVER API KEY HERE\n You must set the GCM SERVER API KEY so that push notifications can happen\n */\nvar SERVER_API_KEY = \n\n\n\n\n\n\nUpdate the API Endpoint (Optional)\n\n\nBy default, the API Endpoint points to production environment. Optionally, you can change this to sandbox endpoint for development purposes. If you need to do so, do it where \nBASEURL\n is defined.\n\n\nObjective C\n\n\n\nNSString *BASEURL = @\nhttp://192.168.0.109:8000\n;\n\n\n\n\n\nSwift\n\n\n\nvar BASEURL = \nhttp://192.168.0.109:8000\n\n\n\n\n\n\nModifying the API files any further should not be necessary. However, if you feel any need to do so, please contact us at api@octo.ai beforehand.\n\n\nCode Implementation\n\n\nThe following section will detail about the actual code implementation and is divided into following parts\n\n\n\n\nInitialising Octomatic API and handling callback\n\n\nRegistering Client app with GCM servers\n\n\nUpdating user's registrationToken to Octomatic\n\n\nUpdating user's location\n\n\nSending out API calls\n\n\nHandling remote notifications\n\n\n\n\nInitialising Octomatic API and handling callback\n\n\nIn order to initialize Octomatic API import the API files, and initialize the client. The calls are made using \nNSUrlSession\n and are executed async. A callback can be associated with the request which gets executed with the response value. The response value is a string which contains the eventId of the API call. This eventId can always be used from the dashboard to trace an event.\n\n\nIn the following example, an \napp.init\n call is made for a user with ID as 2. In the callback, the response is logged to console.\n\n\nObjective C\n\n\n\n#import \nOctoAPI.h\n\n\n\n// somewhere in the code\nOctoAPI *api = [[OctoAPI alloc] init];\n\nNSInteger userId = 2;\n[api sendAppInitCall:userId\n        onCompletion: ^(NSString* response){\n            NSLog(@\nGot response from App.Init %@\n,\n            response);\n          }];\n\n\n\n\n\nSwift\n\n\n\nlet api = OctoAPI()\nlet userId = 2\n\napi.sendAppInitCall(userId) { (result) -\n Void in\n    print(result)\n}\n\n\n\n\n\nRegistering your app client with GCM\n\n\n\n\nFollow the \nGCM guide for iOS installation\n for a detailed, step by step guide to register client with GCM and get user's registrationToken.\n\n\nFor a detailed working implementation, please take a look at the corresponding \nAppDelegate\n file.\n\n\n\n\nUpdating user's registrationToken to Octomatic\n\n\nIn the \nregistrationHandler\n part of the GCM code, implement the \nupdatePushToken\n call. Following are the code samples.\n\n\nObjective C (AppDelegate.m)\n\n\nGCMConfig *gcmConfig = [GCMConfig defaultConfig];\n  gcmConfig.receiverDelegate = self;\n  [[GCMService sharedInstance] startWithConfig:gcmConfig];\n  // [END start_gcm_service]\n  __weak typeof(self) weakSelf = self;\n  // Handler for registration token request\n  _registrationHandler = ^(NSString *registrationToken, NSError *error){\n    if (registrationToken != nil) {\n      weakSelf.registrationToken = registrationToken;\n      NSLog(@\nRegistration Token: %@\n, registrationToken);\n      [weakSelf subscribeToTopic];\n      NSDictionary *userInfo = @{@\nregistrationToken\n:registrationToken};\n      [[NSNotificationCenter defaultCenter] postNotificationName:weakSelf.registrationKey\n                                                          object:nil\n                                                        userInfo:userInfo];\n        // update the token to Octo\n        OctoAPI *api = [[OctoAPI alloc] init];\n        [api updatePushToken:2 pushToken:registrationToken  onCompletion: ^(NSString* response){\n            NSLog(@\nGot response from Push Token %@\n, response);\n        }];\n\n    } else {\n      NSLog(@\nRegistration to GCM failed with error: %@\n, error.localizedDescription);\n      NSDictionary *userInfo = @{@\nerror\n:error.localizedDescription};\n      [[NSNotificationCenter defaultCenter] postNotificationName:weakSelf.registrationKey\n                                                          object:nil\n                                                        userInfo:userInfo];\n    }\n  };\n\n\n\n\nSwift (AppDelegate.swift)\n\n\nfunc registrationHandler(registrationToken: String!, error: NSError!) {\nif (registrationToken != nil) {\n\n\n    // Push TO Octo\n  let api = OctoAPI()\n    let userId = 4\n    api.sendPushToken(userId, pushToken: registrationToken) { (result) -\n Void in\n        print(\nPush Token Response\n, result)\n    }\n\n\n  self.registrationToken = registrationToken\n  print(\nRegistration Token: \\(registrationToken)\n)\n  self.subscribeToTopic()\n  let userInfo = [\nregistrationToken\n: registrationToken]\n  NSNotificationCenter.defaultCenter().postNotificationName(\n    self.registrationKey, object: nil, userInfo: userInfo)\n} else {\n  print(\nRegistration to GCM failed with error: \\(error.localizedDescription)\n)\n  let userInfo = [\nerror\n: error.localizedDescription]\n  NSNotificationCenter.defaultCenter().postNotificationName(\n    self.registrationKey, object: nil, userInfo: userInfo)\n}\n}\n\n\n\n\nUpdating user's location\n\n\nObjective C\n\n\nInclude the CoreLocation framework in \nAppDelegate.h\n header file. Also add a property \nlocationManager\n to AppDelegate interface\n\n\n\n#import \nGoogle/CloudMessaging.h\n\n#import \nUIKit/UIKit.h\n\n#import \nCoreLocation/CoreLocation.h\n\n\n@interface AppDelegate : UIResponder \nUIApplicationDelegate, GGLInstanceIDDelegate, GCMReceiverDelegate\n\n\n@property(nonatomic, strong) UIWindow *window;\n@property(nonatomic, readonly, strong) NSString *registrationKey;\n@property(nonatomic, readonly, strong) NSString *messageKey;\n@property(nonatomic, readonly, strong) NSString *gcmSenderID;\n@property(nonatomic, readonly, strong) NSDictionary *registrationOptions;\n\n@property (nonatomic, retain) CLLocationManager *locationManager;\n\n@end\n\n\n\n\n\nRequesting Geolocation from user should be done when the app finishes launching. Typically, this could be in \nAppDelegate.m\n's \ndidFinishLaunchingWithOptions\n function.\n\n\n\n- (BOOL)application:(UIApplication *)application\n      didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n\n    // Get geolocation permissions from user\n    if (![CLLocationManager locationServicesEnabled]) {\n        NSLog(@\nDisabled\n);\n        // location services is disabled, alert user\n        UIAlertView *servicesDisabledAlert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@\nDisabledTitle\n, @\nDisabledTitle\n)\n                                                                        message:NSLocalizedString(@\nDisabledMessage\n, @\nDisabledMessage\n)\n                                                                       delegate:nil\n                                                              cancelButtonTitle:NSLocalizedString(@\nOKButtonTitle\n, @\nOKButtonTitle\n)\n                                                              otherButtonTitles:nil];\n        [servicesDisabledAlert show];\n    }\n    else\n    {\n        self.locationManager = [[CLLocationManager alloc] init];\n        self.locationManager.delegate = self;\n        if ([self.locationManager respondsToSelector:@selector(requestWhenInUseAuthorization)]) {\n            [self.locationManager requestWhenInUseAuthorization];\n        }\n        [self.locationManager startUpdatingLocation];\n        NSLog(@\nNot Disabled\n);\n    }\n}\n\n\n\n\n\nOnce the permissions to get geolocation from user is available, then add a delegate method that would update the location to Octomatic's API. Not that this does not necessarily mean an API call. It just means that the next API call happening would include the updated location of the user.\n\n\nThis should typically reside in \nAppDelegate.m\n\n\n\n- (void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray *)locations\n{\n    [OctoAPI updateLocation:locations];\n}\n\n\n\n\n\nSwift\n\n\nImport the required framework in \nViewController.swift\n and add it's delegate\n\n\n\nimport CoreLocation\n\nclass ViewController: UIViewController, CLLocationManagerDelegate {\n\n    var locationManager: CLLocationManager!\n\n    // ...\n}\n\n\n\n\n\nAsk for authorization when the view loads\n\n\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n\n    locationManager = CLLocationManager()\n    locationManager.delegate = self\n    locationManager.requestWhenInUseAuthorization()\n\n}\n\n\n\n\n\nUpdate Octo API about new locations when they happen. This does not necessarily mean making an API call to Octomatic's endpoint. It only means that the next API call will happen with the new location that is available.\n\n\n\nfunc locationManager(manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n    OctoAPI.updateLocation(locations)\n}\n\nfunc locationManager(manager: CLLocationManager, didFailWithError error: NSError) {\n    print(\ndidFailWithError: \\(error.description)\n)\n\n}\nfunc locationManager(manager: CLLocationManager, didChangeAuthorizationStatus status: CLAuthorizationStatus) {\n    if status == .AuthorizedWhenInUse {\n        locationManager.startUpdatingLocation()\n    }\n    if status == .AuthorizedAlways {\n        if CLLocationManager.isMonitoringAvailableForClass(CLBeaconRegion.self) {\n            if CLLocationManager.isRangingAvailable() {\n                // do stuff\n            }\n        }\n    }\n}\n\n\n\n\n\nSending out API calls\n\n\napp.init\n\n\n\n\nThis call should be made everytime the app comes to foreground. Place the code inside \napplicationDidBecomeActive\n function in \nappdelegate\n file. There could be potentially more stuff inside it. Make sure to add it to the last of all the other things happening.\n\n\nObjective C (AppDelegate.m)\n\n\n\n// [START connect_gcm_service]\n- (void)applicationDidBecomeActive:(UIApplication *)application {\n\n    // Authenticate the user\n    NSInteger userId = 2;\n\n    // Send app.init call to Octomatic\n    OctoAPI *api = [[OctoAPI alloc] init];\n    [api sendAppInitCall:userId onCompletion: ^(NSString* response){\n        NSLog(@\nGot response from App.Init %@\n, response);\n    }];\n\n}\n\n\n\n\n\nSwift (AppDelegate.swift)\n\n\n\nfunc applicationDidBecomeActive( application: UIApplication) {\n\n    // authenticate the user\n    let userId = 2\n\n    // send App Init API Call to Octo\n    let api = OctoAPI()\n    api.sendAppInitCall(userId) { (result) -\n Void in\n        print(\nApp.Init result\n, result)\n    }\n}\n\n\n\n\n\napp.login\n\n\n\n\nThis call should be made everytime an un-authenticated user authenticates themselves and logs into the system. Place this at your login callback function.\n\n\nIn the starter kit, these calls are placed in \nViewController\n files. They are triggered by corresponding button actions.\n\n\nObjective C\n\n\n\n// user who just logged in\nNSInteger userId = 2;\n\nOctoAPI *api = [[OctoAPI alloc] init];\n[api sendAppLoginCall:userId  onCompletion: ^(NSString* response){\n    NSLog(@\nGot response from App.Login %@\n, response);\n\n    // Possibly store this response for tracing it\n}];\n\n\n\n\n\nSwift\n\n\n\n// authenticate the user\n\nlet userId = 2\n\nlet api = OctoAPI()\napi.sendAppLoginCall(userId) { (result) -\n Void in\n    // do something with the response.\n    // possibly store it for tracing/debugging purposes\n    print(result)\n}\n\n\n\n\n\napp.logout\n\n\n\n\nThis call should be made everytime a user chooses to logout from the system. Place this call just before the logout action happens.\n\n\nIn the starter kit, these calls are placed in \nViewController\n files. They are triggered by corresponding button actions.\n\n\nObjective C\n\n\n\n// user who is logging out\nNSInteger userId = 2;\n\nOctoAPI *api = [[OctoAPI alloc] init];\n[api sendAppLogoutCall:userId  onCompletion: ^(NSString* response){\n    NSLog(@\nGot response from App.Logout %@\n, response);\n\n    // Possibly store this response for tracing it\n}]\n\n\n\n\n\nSwift\n\n\n\nlet userId = 2\n\nlet api = OctoAPI()\napi.sendAppLogoutCall(userId) { (result) -\n Void in\n    // do something with the response.\n    // possibly store it for tracing/debugging purposes\n    print(result)\n}\n\n\n\n\n\npage.view\n\n\n\n\nThis call should be send upon every page view call happening. A pageview is said to happen when a user is browsing any page that is \nnot a product page\n. Product pages are handled separately by a \nproductpage.view\n call.\n\n\nIn the starter kit, these calls are placed in \nViewController\n files. They are triggered by corresponding button actions.\n\n\nObjective C\n\n\n\n// authenticated user who is viewing the page\nNSInteger userId = 2;\n\n// Symbolic URL (or other unique identifier)\n// for the page being viewed\nNSString *routeUrl = @\nHome#Index\n;\n\n// Categories this page belongs to\nNSArray *categories = @[@\nAldo\n, @\nWomen\n];\n\n// Tags that belong to the page\nNSArray *tags = @[@\nRed\n, @\nHandbag\n, @\nLeather\n];\n\nOctoAPI *api = [[OctoAPI alloc] init];\n[api sendPageViewCall:userId\n                routeUrl:routeUrl\n           categories:categories\n                 tags:tags\n         onCompletion: ^(NSString* response){\n             NSLog(@\nGot response from Page.View %@\n, response);\n     }];\n\n\n\n\n\nSwift\n\n\n\n// Symbolic URL (or other unique identifier)\n// for the page being viewed\nlet routeUrl = \n/Home\n\n\n// Categories this page belongs to\nlet categories = [\nsomething\n, \nsomething else\n]\n\n// Tags that belong to the page\nlet tags = [\ncat1\n, \ncat2\n]\n\n// authenticated user who is viewing the page\nlet userId = 2\n\nlet api = OctoAPI() \napi.sendPageViewCall(userId, routeUrl: routeUrl,\n    categories: categories, tags: tags) { (result) -\n Void in\n        self.showAPIResult(result)\n}\n\n\n\n\n\nproductpage.view\n\n\n\n\nThis call should be sent on every product pageview. This call differs from the \npage.view\n call.\n\n\nIn the starter kit, these calls are placed in \nViewController\n files. They are triggered by corresponding button actions.\n\n\nObjective C\n\n\n\n// authenticated user who is viewing the page\nNSInteger userId = 2;\n\n// Symbolic URL (or other unique identifier)\n// for the page being viewed\nNSString *routeUrl = @\nHome#Index\n;\n\n// id of the product\nNSInteger pid = 8263243\n\n// name of the product\nNSString* name = @\nSmartPhone Series S10\n;\n\n// price of the product\ndouble price = 899.99;\n\n// Categories this page belongs to\nNSArray *categories = @[@\nAldo\n, @\nWomen\n];\n\n// Tags that belong to the page\nNSArray *tags = @[@\nRed\n, @\nHandbag\n, @\nLeather\n];\n\nOctoAPI *api = [[OctoAPI alloc] init];\n    [api sendProductPageViewCall:userId\n                        routeUrl:routeUrl\n                       productId:pid\n                     productName:name\n                           price:price\n                      categories:categories\n                            tags:tags\n                    onCompletion: ^(NSString* response){\n                        NSLog(@\nGot response from Productpage.view %@\n,\n                        response);\n                    }\n     ];\n\n\n\n\n\nSwift\n\n\n\n// authenticated user who is viewing this product\nlet userId = 4\n\n// Symbolic URL (or other unique identifier)\n// for the page being viewed\nlet routeUrl = \n/Home/Phone\n\n\n// name of the product being viewed\nlet productName = \nSmartphone Series S02\n\n\n// price of the product\nlet price = 999.00\n\n// ID of the product\nlet productId = 635373\n\n// categories this product belongs to\nlet categories = [\nelectronics\n, \nphones\n]\n\n// tags that belong to this product\nlet tags = [\nselfie\n, \ncheap\n]\n\nlet api = OctoAPI() \napi.sendProductPageViewCall(userId, routeUrl: routeUrl,\n    productId: productId, price: price, productName: productName,\n    categories: categories, tags: tags) { (result) -\n Void in\n        print(result)\n}\n\n\n\n\n\nRegistering for remote notifications\n\n\nObjective C (AppDelegate.m)\n\n\nPut the following inside \ndidFinishLaunchingWithOptions\n so as to ask permissions about push notifications.\n\n\n  NSError* configureError;\n  [[GGLContext sharedInstance] configureWithError:\nconfigureError];\n  NSAssert(!configureError, @\nError configuring Google services: %@\n, configureError);\n  _gcmSenderID = [[[GGLContext sharedInstance] configuration] gcmSenderID];\n  // Register for remote notifications\n  if (floor(NSFoundationVersionNumber) \n= NSFoundationVersionNumber_iOS_7_1) {\n    // iOS 7.1 or earlier\n    UIRemoteNotificationType allNotificationTypes =\n        (UIRemoteNotificationTypeSound | UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeBadge);\n    [application registerForRemoteNotificationTypes:allNotificationTypes];\n  } else {\n    // iOS 8 or later\n    // [END_EXCLUDE]\n    UIUserNotificationType allNotificationTypes =\n        (UIUserNotificationTypeSound | UIUserNotificationTypeAlert | UIUserNotificationTypeBadge);\n    UIUserNotificationSettings *settings =\n        [UIUserNotificationSettings settingsForTypes:allNotificationTypes categories:nil];\n    [[UIApplication sharedApplication] registerUserNotificationSettings:settings];\n    [[UIApplication sharedApplication] registerForRemoteNotifications];\n  }\n\n\n\n\nThe following functions check the status of push notifications permissions and appropriately handle the situation. If it is a success asking for permissions, GCM updates the registrationToken for user. In case of error, just a message is displayed.\n\n\n- (void)application:(UIApplication *)application\n    didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n// [END receive_apns_token]\n  // [START get_gcm_reg_token]\n  // Create a config and set a delegate that implements the GGLInstaceIDDelegate protocol.\n  GGLInstanceIDConfig *instanceIDConfig = [GGLInstanceIDConfig defaultConfig];\n  instanceIDConfig.delegate = self;\n  // Start the GGLInstanceID shared instance with the that config and request a registration\n  // token to enable reception of notifications\n  [[GGLInstanceID sharedInstance] startWithConfig:instanceIDConfig];\n  _registrationOptions = @{kGGLInstanceIDRegisterAPNSOption:deviceToken,\n                           kGGLInstanceIDAPNSServerTypeSandboxOption:@YES};\n  [[GGLInstanceID sharedInstance] tokenWithAuthorizedEntity:_gcmSenderID\n                                                      scope:kGGLInstanceIDScopeGCM\n                                                    options:_registrationOptions\n                                                    handler:_registrationHandler];\n  // [END get_gcm_reg_token]\n}\n\n// [START receive_apns_token_error]\n- (void)application:(UIApplication *)application\n    didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {\n  NSLog(@\nRegistration for remote notification failed with error: %@\n, error.localizedDescription);\n// [END receive_apns_token_error]\n  NSDictionary *userInfo = @{@\nerror\n :error.localizedDescription};\n  [[NSNotificationCenter defaultCenter] postNotificationName:_registrationKey\n                                                      object:nil\n                                                    userInfo:userInfo];\n}\n\n\n\n\nSwift (AppDelegate.swift)\n\n\n  func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions:\n      [NSObject: AnyObject]?) -\n Bool {\n    // [START_EXCLUDE]\n    // Configure the Google context: parses the GoogleService-Info.plist, and initializes\n    // the services that have entries in the file\n    var configureError:NSError?\n    GGLContext.sharedInstance().configureWithError(\nconfigureError)\n    assert(configureError == nil, \nError configuring Google services: \\(configureError)\n)\n    gcmSenderID = GGLContext.sharedInstance().configuration.gcmSenderID\n    // [END_EXCLUDE]\n    // Register for remote notifications\n    if #available(iOS 8.0, *) {\n      let settings: UIUserNotificationSettings =\n          UIUserNotificationSettings(forTypes: [.Alert, .Badge, .Sound], categories: nil)\n      application.registerUserNotificationSettings(settings)\n      application.registerForRemoteNotifications()\n    } else {\n      // Fallback\n      let types: UIRemoteNotificationType = [.Alert, .Badge, .Sound]\n      application.registerForRemoteNotificationTypes(types)\n    }\n\n  // [END register_for_remote_notifications]\n  // [START start_gcm_service]\n    let gcmConfig = GCMConfig.defaultConfig()\n    gcmConfig.receiverDelegate = self\n    GCMService.sharedInstance().startWithConfig(gcmConfig)\n  // [END start_gcm_service]\n    return true\n  }\n\n\n\n\nSimilarly, check the status of permissions and update the GCM or handle the error accordingly.\n\n\n  func application( application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken\n      deviceToken: NSData ) {\n  // [END receive_apns_token]\n        // [START get_gcm_reg_token]\n        // Create a config and set a delegate that implements the GGLInstaceIDDelegate protocol.\n        let instanceIDConfig = GGLInstanceIDConfig.defaultConfig()\n        instanceIDConfig.delegate = self\n        // Start the GGLInstanceID shared instance with that config and request a registration\n        // token to enable reception of notifications\n        GGLInstanceID.sharedInstance().startWithConfig(instanceIDConfig)\n        registrationOptions = [kGGLInstanceIDRegisterAPNSOption:deviceToken,\n          kGGLInstanceIDAPNSServerTypeSandboxOption:true]\n        GGLInstanceID.sharedInstance().tokenWithAuthorizedEntity(gcmSenderID,\n          scope: kGGLInstanceIDScopeGCM, options: registrationOptions, handler: registrationHandler)\n        // [END get_gcm_reg_token]\n  }\n\n  // [START receive_apns_token_error]\n  func application( application: UIApplication, didFailToRegisterForRemoteNotificationsWithError\n      error: NSError ) {\n    print(\nRegistration for remote notification failed with error: \\(error.localizedDescription)\n)\n  // [END receive_apns_token_error]\n    let userInfo = [\nerror\n: error.localizedDescription]\n    NSNotificationCenter.defaultCenter().postNotificationName(\n        registrationKey, object: nil, userInfo: userInfo)\n  }\n\n\n\n\nHandling remote notifications\n\n\nIn order to inform the user about an incoming remote notification, the appropriate \ndidReceiveRemoteNotification\n call needs to be worked upon. Here is how you can do it:\n\n\nObjective C (AppDelegate.m)\n\n\n- (void)application:(UIApplication *)application\n    didReceiveRemoteNotification:(NSDictionary *)userInfo {\n  // This works only if the app started the GCM service\n  [[GCMService sharedInstance] appDidReceiveMessage:userInfo];\n  // Handle the received message\n  // [START_EXCLUDE]\n  [[NSNotificationCenter defaultCenter] postNotificationName:_messageKey\n                                                      object:nil\n                                                    userInfo:userInfo];\n  // [END_EXCLUDE]\n}\n\n- (void)application:(UIApplication *)application\n    didReceiveRemoteNotification:(NSDictionary *)userInfo\n    fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))handler {\n  // This works only if the app started the GCM service\n  [[GCMService sharedInstance] appDidReceiveMessage:userInfo];\n  // Handle the received message\n  // Invoke the completion handler passing the appropriate UIBackgroundFetchResult value\n  // [START_EXCLUDE]\n  [[NSNotificationCenter defaultCenter] postNotificationName:_messageKey\n                                                      object:nil\n                                                    userInfo:userInfo];\n  handler(UIBackgroundFetchResultNewData);\n  // [END_EXCLUDE]\n    NSLog(@\nDone with notification stuff.\n);\n}\n\n\n\n\nSwift (AppDelegate.swift)\n\n\n  func application( application: UIApplication,\n    didReceiveRemoteNotification userInfo: [NSObject : AnyObject]) {\n      print(\nNotification received: \\(userInfo)\n)\n      // This works only if the app started the GCM service\n      GCMService.sharedInstance().appDidReceiveMessage(userInfo);\n      // Handle the received message\n      // [START_EXCLUDE]\n      NSNotificationCenter.defaultCenter().postNotificationName(messageKey, object: nil,\n          userInfo: userInfo)\n      // [END_EXCLUDE]\n  }\n\n  func application( application: UIApplication,\n    didReceiveRemoteNotification userInfo: [NSObject : AnyObject],\n    fetchCompletionHandler handler: (UIBackgroundFetchResult) -\n Void) {\n      print(\nNotification received: \\(userInfo)\n)\n      // This works only if the app started the GCM service\n      GCMService.sharedInstance().appDidReceiveMessage(userInfo);\n\n      // Invoke the completion handler passing the appropriate UIBackgroundFetchResult value\n      // [START_EXCLUDE]\n      NSNotificationCenter.defaultCenter().postNotificationName(messageKey, object: nil,\n        userInfo: userInfo)\n      handler(UIBackgroundFetchResult.NoData);\n      // [END_EXCLUDE]\n  }", 
            "title": "iOS, GCM"
        }, 
        {
            "location": "/iOSGCMStarterKit/index.html#ios_gcm_starter_kit", 
            "text": "This kit covers an app published on iOS platform and uses GCM for push notifications.    iOS, GCM Starter Kit  Get Started  Github Clone  Libraries    Setup Capabilities  GeoLocation  Provide an explanation for why location is being used  Link to CoreLocation framework    Push Notification  Enable Push Notifications  Get the GCM config file  Add the configuration file to your project      Setup Octomatic Enterprise API  Add API Keys  Update the API Endpoint (Optional)    Code Implementation  Initialising Octomatic API and handling callback  Registering your app client with GCM  Updating user's registrationToken to Octomatic  Updating user's location  Objective C  Swift    Sending out API calls  app.init  app.login  app.logout  page.view  productpage.view    Registering for remote notifications  Handling remote notifications", 
            "title": "iOS, GCM Starter Kit"
        }, 
        {
            "location": "/iOSGCMStarterKit/index.html#get_started", 
            "text": "", 
            "title": "Get Started"
        }, 
        {
            "location": "/iOSGCMStarterKit/index.html#github_clone", 
            "text": "The complete source code of this app is available at our Github.  https://github.com/octoai/StarterKit-IOS-GCM . You should clone this and keep it ready for reference.  You can also  download  the starter kit from here. This starter kit contains a working sample of code that takes all permissions from users, and sends appropriate API calls at appropriate times.  If you already have an app, chances are most of the steps would have been already done. However, it is advised to go through the document and remove any inconsistencies.  The code snippets mentioned here can be found in the starter kit. Should you have any difficulty understaning the flow, the starter kit code should help you out.", 
            "title": "Github Clone"
        }, 
        {
            "location": "/iOSGCMStarterKit/index.html#libraries", 
            "text": "If you just want to download the libraries for Octomatic API, choose your language below:   Objective C API  Swift API", 
            "title": "Libraries"
        }, 
        {
            "location": "/iOSGCMStarterKit/index.html#setup_capabilities", 
            "text": "", 
            "title": "Setup Capabilities"
        }, 
        {
            "location": "/iOSGCMStarterKit/index.html#geolocation", 
            "text": "In order to be able to use geolocation while app is running in foreground, you need to do the following steps:", 
            "title": "GeoLocation"
        }, 
        {
            "location": "/iOSGCMStarterKit/index.html#provide_an_explanation_for_why_location_is_being_used", 
            "text": "Create a key named  NSLocationWhenInUseUsageDescription  in  Info.plist . The string value of this key should be the description. By default, the description reads \" We use geolocation to provide better recommendations \". You may change to a suitable text, if necessary.  key NSLocationWhenInUseUsageDescription /key  string We use geolocation to provide better recommendations /string", 
            "title": "Provide an explanation for why location is being used"
        }, 
        {
            "location": "/iOSGCMStarterKit/index.html#link_to_corelocation_framework", 
            "text": "Go to  Build Phases   Link Binary with Libraries . Click on the  +  sign and select  CoreLocation.framework  from the list that comes.", 
            "title": "Link to CoreLocation framework"
        }, 
        {
            "location": "/iOSGCMStarterKit/index.html#push_notification", 
            "text": "In order to enable push notification on your app, you need to do the following:", 
            "title": "Push Notification"
        }, 
        {
            "location": "/iOSGCMStarterKit/index.html#enable_push_notifications", 
            "text": "Select your build target and go to  Capabilities  tab. Turn on  Push Notifications .", 
            "title": "Enable Push Notifications"
        }, 
        {
            "location": "/iOSGCMStarterKit/index.html#get_the_gcm_config_file", 
            "text": "You would require a  GoogleServices-Info.plist  file for your project. In order to generate this file, you need to provide a valid APNs certificate and some additional information to get a configuration file and finish setting up your project. If you don't already have an APNs certificate, see  Provisioning APNs SSL Certificates . When prompted, provide the Bundle ID associated with your APNs certificate.  Get the configuration file for GCM .  After you complete the configuration process, take note of the API server key on the download page, you will need it later. Download the GoogleServices-Info.plist file to add to your project.", 
            "title": "Get the GCM config file"
        }, 
        {
            "location": "/iOSGCMStarterKit/index.html#add_the_configuration_file_to_your_project", 
            "text": "Drag the  GoogleService-Info.plist  file you just downloaded into the root of your Xcode project and add it to all targets.\nIn Xcode, replace the bundle identifier for the GcmExample and GcmExampleSwift targets with the value associated with your APNs certificate. This must be the same value used in the Get a configuration file step.  For more detailed instructions, please follow the  GCM iOS guide .", 
            "title": "Add the configuration file to your project"
        }, 
        {
            "location": "/iOSGCMStarterKit/index.html#setup_octomatic_enterprise_api", 
            "text": "The Octomatic Enterprise API contains following files   Swift  OctoAPI.swift    Objective C  OctoAPI.h  OctoAPI.m     Copy these files to your corresponding project's source directory.", 
            "title": "Setup Octomatic Enterprise API"
        }, 
        {
            "location": "/iOSGCMStarterKit/index.html#add_api_keys", 
            "text": "Once copied, you would require to add appropriate API Key and server key at the right places.  Objective C  Open  OctoAPI.m  and you should see something like below. Update the  APIKEY  with your Octomatic's Enterprise API Key. You should also update  SERVER_API_KEY  with the GCM server api key.  \n/*\n SET YOUR API KEY HERE\n You must manually set the API Key here\n */\nNSString *APIKEY = @ ;\n\n\n/*\nSET YOUR GCM SERVER API KEY HERE\n You must set the GCM SERVER API KEY so that push notifications can happen\n */\nNSString *SERVER_API_KEY = @ ;  Swift  Open  OctoAPI.swift  and update  APIKEY  with your Octomatic's Enterprise API Key. You should also update  SERVER_API_KEY  with the GCM server api key.  \n/*\nUpdate your API KEY here.\n*/\nvar APIKEY =  \n\n/*\nSET YOUR GCM SERVER API KEY HERE\n You must set the GCM SERVER API KEY so that push notifications can happen\n */\nvar SERVER_API_KEY =", 
            "title": "Add API Keys"
        }, 
        {
            "location": "/iOSGCMStarterKit/index.html#update_the_api_endpoint_optional", 
            "text": "By default, the API Endpoint points to production environment. Optionally, you can change this to sandbox endpoint for development purposes. If you need to do so, do it where  BASEURL  is defined.  Objective C  \nNSString *BASEURL = @ http://192.168.0.109:8000 ;  Swift  \nvar BASEURL =  http://192.168.0.109:8000   Modifying the API files any further should not be necessary. However, if you feel any need to do so, please contact us at api@octo.ai beforehand.", 
            "title": "Update the API Endpoint (Optional)"
        }, 
        {
            "location": "/iOSGCMStarterKit/index.html#code_implementation", 
            "text": "The following section will detail about the actual code implementation and is divided into following parts   Initialising Octomatic API and handling callback  Registering Client app with GCM servers  Updating user's registrationToken to Octomatic  Updating user's location  Sending out API calls  Handling remote notifications", 
            "title": "Code Implementation"
        }, 
        {
            "location": "/iOSGCMStarterKit/index.html#initialising_octomatic_api_and_handling_callback", 
            "text": "In order to initialize Octomatic API import the API files, and initialize the client. The calls are made using  NSUrlSession  and are executed async. A callback can be associated with the request which gets executed with the response value. The response value is a string which contains the eventId of the API call. This eventId can always be used from the dashboard to trace an event.  In the following example, an  app.init  call is made for a user with ID as 2. In the callback, the response is logged to console.  Objective C  \n#import  OctoAPI.h \n\n\n// somewhere in the code\nOctoAPI *api = [[OctoAPI alloc] init];\n\nNSInteger userId = 2;\n[api sendAppInitCall:userId\n        onCompletion: ^(NSString* response){\n            NSLog(@ Got response from App.Init %@ ,\n            response);\n          }];  Swift  \nlet api = OctoAPI()\nlet userId = 2\n\napi.sendAppInitCall(userId) { (result) -  Void in\n    print(result)\n}", 
            "title": "Initialising Octomatic API and handling callback"
        }, 
        {
            "location": "/iOSGCMStarterKit/index.html#registering_your_app_client_with_gcm", 
            "text": "Follow the  GCM guide for iOS installation  for a detailed, step by step guide to register client with GCM and get user's registrationToken.  For a detailed working implementation, please take a look at the corresponding  AppDelegate  file.", 
            "title": "Registering your app client with GCM"
        }, 
        {
            "location": "/iOSGCMStarterKit/index.html#updating_users_registrationtoken_to_octomatic", 
            "text": "In the  registrationHandler  part of the GCM code, implement the  updatePushToken  call. Following are the code samples.  Objective C (AppDelegate.m)  GCMConfig *gcmConfig = [GCMConfig defaultConfig];\n  gcmConfig.receiverDelegate = self;\n  [[GCMService sharedInstance] startWithConfig:gcmConfig];\n  // [END start_gcm_service]\n  __weak typeof(self) weakSelf = self;\n  // Handler for registration token request\n  _registrationHandler = ^(NSString *registrationToken, NSError *error){\n    if (registrationToken != nil) {\n      weakSelf.registrationToken = registrationToken;\n      NSLog(@ Registration Token: %@ , registrationToken);\n      [weakSelf subscribeToTopic];\n      NSDictionary *userInfo = @{@ registrationToken :registrationToken};\n      [[NSNotificationCenter defaultCenter] postNotificationName:weakSelf.registrationKey\n                                                          object:nil\n                                                        userInfo:userInfo];\n        // update the token to Octo\n        OctoAPI *api = [[OctoAPI alloc] init];\n        [api updatePushToken:2 pushToken:registrationToken  onCompletion: ^(NSString* response){\n            NSLog(@ Got response from Push Token %@ , response);\n        }];\n\n    } else {\n      NSLog(@ Registration to GCM failed with error: %@ , error.localizedDescription);\n      NSDictionary *userInfo = @{@ error :error.localizedDescription};\n      [[NSNotificationCenter defaultCenter] postNotificationName:weakSelf.registrationKey\n                                                          object:nil\n                                                        userInfo:userInfo];\n    }\n  };  Swift (AppDelegate.swift)  func registrationHandler(registrationToken: String!, error: NSError!) {\nif (registrationToken != nil) {\n\n\n    // Push TO Octo\n  let api = OctoAPI()\n    let userId = 4\n    api.sendPushToken(userId, pushToken: registrationToken) { (result) -  Void in\n        print( Push Token Response , result)\n    }\n\n\n  self.registrationToken = registrationToken\n  print( Registration Token: \\(registrationToken) )\n  self.subscribeToTopic()\n  let userInfo = [ registrationToken : registrationToken]\n  NSNotificationCenter.defaultCenter().postNotificationName(\n    self.registrationKey, object: nil, userInfo: userInfo)\n} else {\n  print( Registration to GCM failed with error: \\(error.localizedDescription) )\n  let userInfo = [ error : error.localizedDescription]\n  NSNotificationCenter.defaultCenter().postNotificationName(\n    self.registrationKey, object: nil, userInfo: userInfo)\n}\n}", 
            "title": "Updating user's registrationToken to Octomatic"
        }, 
        {
            "location": "/iOSGCMStarterKit/index.html#updating_users_location", 
            "text": "", 
            "title": "Updating user's location"
        }, 
        {
            "location": "/iOSGCMStarterKit/index.html#objective_c", 
            "text": "Include the CoreLocation framework in  AppDelegate.h  header file. Also add a property  locationManager  to AppDelegate interface  \n#import  Google/CloudMessaging.h \n#import  UIKit/UIKit.h \n#import  CoreLocation/CoreLocation.h \n\n@interface AppDelegate : UIResponder  UIApplicationDelegate, GGLInstanceIDDelegate, GCMReceiverDelegate \n\n@property(nonatomic, strong) UIWindow *window;\n@property(nonatomic, readonly, strong) NSString *registrationKey;\n@property(nonatomic, readonly, strong) NSString *messageKey;\n@property(nonatomic, readonly, strong) NSString *gcmSenderID;\n@property(nonatomic, readonly, strong) NSDictionary *registrationOptions;\n\n@property (nonatomic, retain) CLLocationManager *locationManager;\n\n@end  Requesting Geolocation from user should be done when the app finishes launching. Typically, this could be in  AppDelegate.m 's  didFinishLaunchingWithOptions  function.  \n- (BOOL)application:(UIApplication *)application\n      didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n\n    // Get geolocation permissions from user\n    if (![CLLocationManager locationServicesEnabled]) {\n        NSLog(@ Disabled );\n        // location services is disabled, alert user\n        UIAlertView *servicesDisabledAlert = [[UIAlertView alloc] initWithTitle:NSLocalizedString(@ DisabledTitle , @ DisabledTitle )\n                                                                        message:NSLocalizedString(@ DisabledMessage , @ DisabledMessage )\n                                                                       delegate:nil\n                                                              cancelButtonTitle:NSLocalizedString(@ OKButtonTitle , @ OKButtonTitle )\n                                                              otherButtonTitles:nil];\n        [servicesDisabledAlert show];\n    }\n    else\n    {\n        self.locationManager = [[CLLocationManager alloc] init];\n        self.locationManager.delegate = self;\n        if ([self.locationManager respondsToSelector:@selector(requestWhenInUseAuthorization)]) {\n            [self.locationManager requestWhenInUseAuthorization];\n        }\n        [self.locationManager startUpdatingLocation];\n        NSLog(@ Not Disabled );\n    }\n}  Once the permissions to get geolocation from user is available, then add a delegate method that would update the location to Octomatic's API. Not that this does not necessarily mean an API call. It just means that the next API call happening would include the updated location of the user.  This should typically reside in  AppDelegate.m  \n- (void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray *)locations\n{\n    [OctoAPI updateLocation:locations];\n}", 
            "title": "Objective C"
        }, 
        {
            "location": "/iOSGCMStarterKit/index.html#swift", 
            "text": "Import the required framework in  ViewController.swift  and add it's delegate  \nimport CoreLocation\n\nclass ViewController: UIViewController, CLLocationManagerDelegate {\n\n    var locationManager: CLLocationManager!\n\n    // ...\n}  Ask for authorization when the view loads  \noverride func viewDidLoad() {\n    super.viewDidLoad()\n\n    locationManager = CLLocationManager()\n    locationManager.delegate = self\n    locationManager.requestWhenInUseAuthorization()\n\n}  Update Octo API about new locations when they happen. This does not necessarily mean making an API call to Octomatic's endpoint. It only means that the next API call will happen with the new location that is available.  \nfunc locationManager(manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n    OctoAPI.updateLocation(locations)\n}\n\nfunc locationManager(manager: CLLocationManager, didFailWithError error: NSError) {\n    print( didFailWithError: \\(error.description) )\n\n}\nfunc locationManager(manager: CLLocationManager, didChangeAuthorizationStatus status: CLAuthorizationStatus) {\n    if status == .AuthorizedWhenInUse {\n        locationManager.startUpdatingLocation()\n    }\n    if status == .AuthorizedAlways {\n        if CLLocationManager.isMonitoringAvailableForClass(CLBeaconRegion.self) {\n            if CLLocationManager.isRangingAvailable() {\n                // do stuff\n            }\n        }\n    }\n}", 
            "title": "Swift"
        }, 
        {
            "location": "/iOSGCMStarterKit/index.html#sending_out_api_calls", 
            "text": "", 
            "title": "Sending out API calls"
        }, 
        {
            "location": "/iOSGCMStarterKit/index.html#appinit", 
            "text": "This call should be made everytime the app comes to foreground. Place the code inside  applicationDidBecomeActive  function in  appdelegate  file. There could be potentially more stuff inside it. Make sure to add it to the last of all the other things happening.  Objective C (AppDelegate.m)  \n// [START connect_gcm_service]\n- (void)applicationDidBecomeActive:(UIApplication *)application {\n\n    // Authenticate the user\n    NSInteger userId = 2;\n\n    // Send app.init call to Octomatic\n    OctoAPI *api = [[OctoAPI alloc] init];\n    [api sendAppInitCall:userId onCompletion: ^(NSString* response){\n        NSLog(@ Got response from App.Init %@ , response);\n    }];\n\n}  Swift (AppDelegate.swift)  \nfunc applicationDidBecomeActive( application: UIApplication) {\n\n    // authenticate the user\n    let userId = 2\n\n    // send App Init API Call to Octo\n    let api = OctoAPI()\n    api.sendAppInitCall(userId) { (result) -  Void in\n        print( App.Init result , result)\n    }\n}", 
            "title": "app.init"
        }, 
        {
            "location": "/iOSGCMStarterKit/index.html#applogin", 
            "text": "This call should be made everytime an un-authenticated user authenticates themselves and logs into the system. Place this at your login callback function.  In the starter kit, these calls are placed in  ViewController  files. They are triggered by corresponding button actions.  Objective C  \n// user who just logged in\nNSInteger userId = 2;\n\nOctoAPI *api = [[OctoAPI alloc] init];\n[api sendAppLoginCall:userId  onCompletion: ^(NSString* response){\n    NSLog(@ Got response from App.Login %@ , response);\n\n    // Possibly store this response for tracing it\n}];  Swift  \n// authenticate the user\n\nlet userId = 2\n\nlet api = OctoAPI()\napi.sendAppLoginCall(userId) { (result) -  Void in\n    // do something with the response.\n    // possibly store it for tracing/debugging purposes\n    print(result)\n}", 
            "title": "app.login"
        }, 
        {
            "location": "/iOSGCMStarterKit/index.html#applogout", 
            "text": "This call should be made everytime a user chooses to logout from the system. Place this call just before the logout action happens.  In the starter kit, these calls are placed in  ViewController  files. They are triggered by corresponding button actions.  Objective C  \n// user who is logging out\nNSInteger userId = 2;\n\nOctoAPI *api = [[OctoAPI alloc] init];\n[api sendAppLogoutCall:userId  onCompletion: ^(NSString* response){\n    NSLog(@ Got response from App.Logout %@ , response);\n\n    // Possibly store this response for tracing it\n}]  Swift  \nlet userId = 2\n\nlet api = OctoAPI()\napi.sendAppLogoutCall(userId) { (result) -  Void in\n    // do something with the response.\n    // possibly store it for tracing/debugging purposes\n    print(result)\n}", 
            "title": "app.logout"
        }, 
        {
            "location": "/iOSGCMStarterKit/index.html#pageview", 
            "text": "This call should be send upon every page view call happening. A pageview is said to happen when a user is browsing any page that is  not a product page . Product pages are handled separately by a  productpage.view  call.  In the starter kit, these calls are placed in  ViewController  files. They are triggered by corresponding button actions.  Objective C  \n// authenticated user who is viewing the page\nNSInteger userId = 2;\n\n// Symbolic URL (or other unique identifier)\n// for the page being viewed\nNSString *routeUrl = @ Home#Index ;\n\n// Categories this page belongs to\nNSArray *categories = @[@ Aldo , @ Women ];\n\n// Tags that belong to the page\nNSArray *tags = @[@ Red , @ Handbag , @ Leather ];\n\nOctoAPI *api = [[OctoAPI alloc] init];\n[api sendPageViewCall:userId\n                routeUrl:routeUrl\n           categories:categories\n                 tags:tags\n         onCompletion: ^(NSString* response){\n             NSLog(@ Got response from Page.View %@ , response);\n     }];  Swift  \n// Symbolic URL (or other unique identifier)\n// for the page being viewed\nlet routeUrl =  /Home \n\n// Categories this page belongs to\nlet categories = [ something ,  something else ]\n\n// Tags that belong to the page\nlet tags = [ cat1 ,  cat2 ]\n\n// authenticated user who is viewing the page\nlet userId = 2\n\nlet api = OctoAPI() \napi.sendPageViewCall(userId, routeUrl: routeUrl,\n    categories: categories, tags: tags) { (result) -  Void in\n        self.showAPIResult(result)\n}", 
            "title": "page.view"
        }, 
        {
            "location": "/iOSGCMStarterKit/index.html#productpageview", 
            "text": "This call should be sent on every product pageview. This call differs from the  page.view  call.  In the starter kit, these calls are placed in  ViewController  files. They are triggered by corresponding button actions.  Objective C  \n// authenticated user who is viewing the page\nNSInteger userId = 2;\n\n// Symbolic URL (or other unique identifier)\n// for the page being viewed\nNSString *routeUrl = @ Home#Index ;\n\n// id of the product\nNSInteger pid = 8263243\n\n// name of the product\nNSString* name = @ SmartPhone Series S10 ;\n\n// price of the product\ndouble price = 899.99;\n\n// Categories this page belongs to\nNSArray *categories = @[@ Aldo , @ Women ];\n\n// Tags that belong to the page\nNSArray *tags = @[@ Red , @ Handbag , @ Leather ];\n\nOctoAPI *api = [[OctoAPI alloc] init];\n    [api sendProductPageViewCall:userId\n                        routeUrl:routeUrl\n                       productId:pid\n                     productName:name\n                           price:price\n                      categories:categories\n                            tags:tags\n                    onCompletion: ^(NSString* response){\n                        NSLog(@ Got response from Productpage.view %@ ,\n                        response);\n                    }\n     ];  Swift  \n// authenticated user who is viewing this product\nlet userId = 4\n\n// Symbolic URL (or other unique identifier)\n// for the page being viewed\nlet routeUrl =  /Home/Phone \n\n// name of the product being viewed\nlet productName =  Smartphone Series S02 \n\n// price of the product\nlet price = 999.00\n\n// ID of the product\nlet productId = 635373\n\n// categories this product belongs to\nlet categories = [ electronics ,  phones ]\n\n// tags that belong to this product\nlet tags = [ selfie ,  cheap ]\n\nlet api = OctoAPI() \napi.sendProductPageViewCall(userId, routeUrl: routeUrl,\n    productId: productId, price: price, productName: productName,\n    categories: categories, tags: tags) { (result) -  Void in\n        print(result)\n}", 
            "title": "productpage.view"
        }, 
        {
            "location": "/iOSGCMStarterKit/index.html#registering_for_remote_notifications", 
            "text": "Objective C (AppDelegate.m)  Put the following inside  didFinishLaunchingWithOptions  so as to ask permissions about push notifications.    NSError* configureError;\n  [[GGLContext sharedInstance] configureWithError: configureError];\n  NSAssert(!configureError, @ Error configuring Google services: %@ , configureError);\n  _gcmSenderID = [[[GGLContext sharedInstance] configuration] gcmSenderID];\n  // Register for remote notifications\n  if (floor(NSFoundationVersionNumber)  = NSFoundationVersionNumber_iOS_7_1) {\n    // iOS 7.1 or earlier\n    UIRemoteNotificationType allNotificationTypes =\n        (UIRemoteNotificationTypeSound | UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeBadge);\n    [application registerForRemoteNotificationTypes:allNotificationTypes];\n  } else {\n    // iOS 8 or later\n    // [END_EXCLUDE]\n    UIUserNotificationType allNotificationTypes =\n        (UIUserNotificationTypeSound | UIUserNotificationTypeAlert | UIUserNotificationTypeBadge);\n    UIUserNotificationSettings *settings =\n        [UIUserNotificationSettings settingsForTypes:allNotificationTypes categories:nil];\n    [[UIApplication sharedApplication] registerUserNotificationSettings:settings];\n    [[UIApplication sharedApplication] registerForRemoteNotifications];\n  }  The following functions check the status of push notifications permissions and appropriately handle the situation. If it is a success asking for permissions, GCM updates the registrationToken for user. In case of error, just a message is displayed.  - (void)application:(UIApplication *)application\n    didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n// [END receive_apns_token]\n  // [START get_gcm_reg_token]\n  // Create a config and set a delegate that implements the GGLInstaceIDDelegate protocol.\n  GGLInstanceIDConfig *instanceIDConfig = [GGLInstanceIDConfig defaultConfig];\n  instanceIDConfig.delegate = self;\n  // Start the GGLInstanceID shared instance with the that config and request a registration\n  // token to enable reception of notifications\n  [[GGLInstanceID sharedInstance] startWithConfig:instanceIDConfig];\n  _registrationOptions = @{kGGLInstanceIDRegisterAPNSOption:deviceToken,\n                           kGGLInstanceIDAPNSServerTypeSandboxOption:@YES};\n  [[GGLInstanceID sharedInstance] tokenWithAuthorizedEntity:_gcmSenderID\n                                                      scope:kGGLInstanceIDScopeGCM\n                                                    options:_registrationOptions\n                                                    handler:_registrationHandler];\n  // [END get_gcm_reg_token]\n}\n\n// [START receive_apns_token_error]\n- (void)application:(UIApplication *)application\n    didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {\n  NSLog(@ Registration for remote notification failed with error: %@ , error.localizedDescription);\n// [END receive_apns_token_error]\n  NSDictionary *userInfo = @{@ error  :error.localizedDescription};\n  [[NSNotificationCenter defaultCenter] postNotificationName:_registrationKey\n                                                      object:nil\n                                                    userInfo:userInfo];\n}  Swift (AppDelegate.swift)    func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions:\n      [NSObject: AnyObject]?) -  Bool {\n    // [START_EXCLUDE]\n    // Configure the Google context: parses the GoogleService-Info.plist, and initializes\n    // the services that have entries in the file\n    var configureError:NSError?\n    GGLContext.sharedInstance().configureWithError( configureError)\n    assert(configureError == nil,  Error configuring Google services: \\(configureError) )\n    gcmSenderID = GGLContext.sharedInstance().configuration.gcmSenderID\n    // [END_EXCLUDE]\n    // Register for remote notifications\n    if #available(iOS 8.0, *) {\n      let settings: UIUserNotificationSettings =\n          UIUserNotificationSettings(forTypes: [.Alert, .Badge, .Sound], categories: nil)\n      application.registerUserNotificationSettings(settings)\n      application.registerForRemoteNotifications()\n    } else {\n      // Fallback\n      let types: UIRemoteNotificationType = [.Alert, .Badge, .Sound]\n      application.registerForRemoteNotificationTypes(types)\n    }\n\n  // [END register_for_remote_notifications]\n  // [START start_gcm_service]\n    let gcmConfig = GCMConfig.defaultConfig()\n    gcmConfig.receiverDelegate = self\n    GCMService.sharedInstance().startWithConfig(gcmConfig)\n  // [END start_gcm_service]\n    return true\n  }  Similarly, check the status of permissions and update the GCM or handle the error accordingly.    func application( application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken\n      deviceToken: NSData ) {\n  // [END receive_apns_token]\n        // [START get_gcm_reg_token]\n        // Create a config and set a delegate that implements the GGLInstaceIDDelegate protocol.\n        let instanceIDConfig = GGLInstanceIDConfig.defaultConfig()\n        instanceIDConfig.delegate = self\n        // Start the GGLInstanceID shared instance with that config and request a registration\n        // token to enable reception of notifications\n        GGLInstanceID.sharedInstance().startWithConfig(instanceIDConfig)\n        registrationOptions = [kGGLInstanceIDRegisterAPNSOption:deviceToken,\n          kGGLInstanceIDAPNSServerTypeSandboxOption:true]\n        GGLInstanceID.sharedInstance().tokenWithAuthorizedEntity(gcmSenderID,\n          scope: kGGLInstanceIDScopeGCM, options: registrationOptions, handler: registrationHandler)\n        // [END get_gcm_reg_token]\n  }\n\n  // [START receive_apns_token_error]\n  func application( application: UIApplication, didFailToRegisterForRemoteNotificationsWithError\n      error: NSError ) {\n    print( Registration for remote notification failed with error: \\(error.localizedDescription) )\n  // [END receive_apns_token_error]\n    let userInfo = [ error : error.localizedDescription]\n    NSNotificationCenter.defaultCenter().postNotificationName(\n        registrationKey, object: nil, userInfo: userInfo)\n  }", 
            "title": "Registering for remote notifications"
        }, 
        {
            "location": "/iOSGCMStarterKit/index.html#handling_remote_notifications", 
            "text": "In order to inform the user about an incoming remote notification, the appropriate  didReceiveRemoteNotification  call needs to be worked upon. Here is how you can do it:  Objective C (AppDelegate.m)  - (void)application:(UIApplication *)application\n    didReceiveRemoteNotification:(NSDictionary *)userInfo {\n  // This works only if the app started the GCM service\n  [[GCMService sharedInstance] appDidReceiveMessage:userInfo];\n  // Handle the received message\n  // [START_EXCLUDE]\n  [[NSNotificationCenter defaultCenter] postNotificationName:_messageKey\n                                                      object:nil\n                                                    userInfo:userInfo];\n  // [END_EXCLUDE]\n}\n\n- (void)application:(UIApplication *)application\n    didReceiveRemoteNotification:(NSDictionary *)userInfo\n    fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))handler {\n  // This works only if the app started the GCM service\n  [[GCMService sharedInstance] appDidReceiveMessage:userInfo];\n  // Handle the received message\n  // Invoke the completion handler passing the appropriate UIBackgroundFetchResult value\n  // [START_EXCLUDE]\n  [[NSNotificationCenter defaultCenter] postNotificationName:_messageKey\n                                                      object:nil\n                                                    userInfo:userInfo];\n  handler(UIBackgroundFetchResultNewData);\n  // [END_EXCLUDE]\n    NSLog(@ Done with notification stuff. );\n}  Swift (AppDelegate.swift)    func application( application: UIApplication,\n    didReceiveRemoteNotification userInfo: [NSObject : AnyObject]) {\n      print( Notification received: \\(userInfo) )\n      // This works only if the app started the GCM service\n      GCMService.sharedInstance().appDidReceiveMessage(userInfo);\n      // Handle the received message\n      // [START_EXCLUDE]\n      NSNotificationCenter.defaultCenter().postNotificationName(messageKey, object: nil,\n          userInfo: userInfo)\n      // [END_EXCLUDE]\n  }\n\n  func application( application: UIApplication,\n    didReceiveRemoteNotification userInfo: [NSObject : AnyObject],\n    fetchCompletionHandler handler: (UIBackgroundFetchResult) -  Void) {\n      print( Notification received: \\(userInfo) )\n      // This works only if the app started the GCM service\n      GCMService.sharedInstance().appDidReceiveMessage(userInfo);\n\n      // Invoke the completion handler passing the appropriate UIBackgroundFetchResult value\n      // [START_EXCLUDE]\n      NSNotificationCenter.defaultCenter().postNotificationName(messageKey, object: nil,\n        userInfo: userInfo)\n      handler(UIBackgroundFetchResult.NoData);\n      // [END_EXCLUDE]\n  }", 
            "title": "Handling remote notifications"
        }, 
        {
            "location": "/androidGCMStarterKit/index.html", 
            "text": "Android, OCTO Starter Kit\n\n\nThis kit covers an app published on Android platform and uses GCM for push notifications.\n\n\n\n\n\n\nAndroid, OCTO Starter Kit\n\n\nGet Started\n\n\nGithub Clone\n\n\nLibraries\n\n\n\n\n\n\nSetup Capabilities\n\n\nGeoLocation\n\n\nGCM Activation\n\n\nGCM Setup\n\n\nPhone Details\n\n\nOcto Libraries\n\n\n\n\n\n\nHow to use\n\n\nApp Init Call\n\n\nUser Login Call\n\n\nUser Logout Call\n\n\nUser Pageview Call\n\n\nUser Product Pageview Call\n\n\nUser GCM Token Update Call\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGet Started\n\n\nGithub Clone\n\n\nThe complete source code of this app is available at our Github. \nhttps://github.com/octoai/StarterKit-Android-Native\n. You should clone this and keep it ready for reference.\n\n\nYou can also \ndownload\n the starter kit from here. This starter kit contains a working sample of code that takes all permissions from users, and sends appropriate API calls at appropriate times.\n\n\nIf you already have an app, chances are most of the steps would have been already done. However, it is advised to go through the document and remove any inconsistencies.\n\n\nThe code snippets mentioned here can be found in the starter kit. Should you have any difficulty understaning the flow, the starter kit code should help you out.\n\n\nLibraries\n\n\nShould you want to download the native library, here is the link:\n\n\n\n\nAndroid Native Libraries\n\n\n\n\nSetup Capabilities\n\n\nGeoLocation\n\n\n\n\nOpen AndroidManifest.xml and add \nACCESS_FINE_LOCATION\n (Which includes both \nACCESS_FINE_LOCATION\n and \nACCESS_COARSE_LOCATION\n).\n\n\nIf you are getting network-based location then you need to add \nINTERNET\n permission too.\n\n\nCopy the \nGPSTracker.java\n class file from android starter kit and place it in along with other class files. This file having all the code setup for fetching user location.\n\n\nCreate an object of GPSTracker class \nGPSTracker object = new GPSTracker(this);\n and start using gps services like\n\n\nCheck GPS services \nobject.canGetLocation()\n\n\nFetch Latitude \nobject.getLatitude()\n\n\nFetch Longitude \nobject.getLongitude()\n\n\nShow GPS Settings Alert Box \nobject.showSettingsAlert()\n\n\nStop using GPS services \nobject.stopUsingGPS()\n\n\n\n\n\n\n\n\n\n\nGCM Activation\n\n\n\n\nCreate an application from \nGoogle Developers Console\n.\n\n\nActivate GCM API.\n\n\nThen, generate a new server key.\n\n\nGenerate Json file for downstream messages in android application. \nGenerate\n.\n\n\nPlace the Json file in '\napp/\n' directory of your android application.\n\n\n\n\nGCM Setup\n\n\nFollow the link to get started with \nGoogle Android GCM Client\n.\n\n\n\n\nPhone Details\n\n\n\n\nImport \nimport android.os.Build;\n to fetch device details as follows\n\n\nBuild.MANUFACTURER\n to find device manufacturer\n\n\nBuild.ID\n to find device id\n\n\nBuild.MODEL\n to find device model\n\n\n\n\n\n\n\n\n\n\nOcto Libraries\n\n\n\n\nImport all files from '\nlibs\n' folder from starter kit. List of files :\n\n\ncommons-codec-1.6.jar\n\n\ncommons-logging-1.1.3.jar\n\n\ngson-2.3.1.jar\n\n\njunit-4.8.1.jar\n\n\nswagger-android-client-1.0.0.jar\n\n\nswagger-annotations-1.5.4.jar\n\n\n\n\n\n\nSetup dependencies in module app gradle\n\n\n\n\n\next {\n    swagger_annotations_version = \n1.5.0\n\n    httpclient_version = \n4.3.3\n\n}\ndependencies {\n    // Default Dependencies\n    compile fileTree(include: ['*.jar'], dir: 'libs')\n    compile 'com.google.android.gms:play-services-gcm:8.4.0'\n    compile 'com.android.support:appcompat-v7:23.2.0'\n    // Dependencies\n    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'\n    androidTestCompile 'com.android.support.test:runner:0.4.1'\n    androidTestCompile 'com.android.support:support-annotations:23.2.0'\n    compile \norg.apache.httpcomponents:httpcore:$httpclient_version\n\n    compile \norg.apache.httpcomponents:httpclient:$httpclient_version\n\n    compile (\norg.apache.httpcomponents:httpcore:$httpclient_version\n) {\n        exclude(group: 'org.apache.httpcomponents', module: 'httpclient')\n    }\n    compile (\norg.apache.httpcomponents:httpmime:$httpclient_version\n) {\n        exclude(group: 'org.apache.httpcomponents', module: 'httpclient')\n    }\n}\n\n\n\n\n\nHow to use\n\n\n\n\nImport swagger apis and models using statements\n\n\n\n\n\nimport io.swagger.client.api.*;\nimport io.swagger.client.model.*;\n\n\n\n\n\n\n\n\nCreate a \nPhoneDetails\n class object \n initialize its variables using predefined library methods (fetch location details from GPSTracker)\n\n\n\n\n\nPhoneDetails phoneDetails = new PhoneDetails();\nphoneDetails.setDeviceId(Build.ID);\nphoneDetails.setLatitude(latitude);\nphoneDetails.setLongitude(longitude);\nphoneDetails.setManufacturer(Build.MANUFACTURER);\nphoneDetails.setModel(Build.MODEL);\n\n\n\n\n\n\n\nApp Init Call\n\n\n\n\nCreate an Async Task for Application Initilization Beacon Call\n\n\n\n\n\nclass AppinitCall extends AsyncTask\nString, Void, String\n {\n\n    private Exception exception;\n\n    protected String doInBackground(String... urls) {\n        try {\n            EventsApi eventsApi = new EventsApi();\n            eventsApi.addHeader(\nContent-Type\n,\napplication/json\n);\n            eventsApi.addHeader(\nAccept\n,\napplication/json\n);\n            eventsApi.addHeader(\napikey\n, \nAPI_KEY\n); // Set your own Api Key\n\n            eventsApi.setBasePath(\nhttp://api.octomatic.in\n); // Set Base Path\n\n            try {\n                Message message = new Message();\n                message.setUserId(1234567); // Set your own User ID\n                message.setPhoneDetails(phoneDetails); // Phone Details Object\n\n                BeaconResponse response = eventsApi.eventsAppInitPost(message);\n                return response.getEventId().toString();\n            } catch (Exception e) {\n                return e.toString();\n            }\n        } catch (Exception e) {\n            this.exception = e;\n            return null;\n        }\n    }\n\n    protected void onPostExecute(String response) {\n        Log.d(\nEventId\n,response);\n    }\n}\n\n\n\n\n\n- Set `Api Key`, `Base Path URL` shared with you.\n- Replace `User Id` with your own Users Id\n- Replace phoneDeatils with your own '**PhoneDetails**' Class object created above.\n\n\n\n\n\nMake Beacon Call when app is initilialized every time user starts application.\n\n\n\n\n\nAppinitCall appinit = new AppinitCall();\nString[] param = new String[]{};\nappinit.execute(param);\n\n\n\n\n\nUser Login Call\n\n\n\n\nCreate an Async Task for User Login Beacon Call\n\n\n\n\n\nclass ApploginCall extends AsyncTask\nString, Void, String\n {\n\n    private Exception exception;\n\n    protected String doInBackground(String... urls) {\n        try {\n            EventsApi eventsApi = new EventsApi();\n            eventsApi.addHeader(\nContent-Type\n,\napplication/json\n);\n            eventsApi.addHeader(\nAccept\n,\napplication/json\n);\n            eventsApi.addHeader(\napikey\n, \nAPI_KEY\n); // Set your own Api Key\n\n            eventsApi.setBasePath(\nhttp://api.octomatic.in\n); // Set Base Path\n            try {\n                Message message = new Message();\n                message.setUserId(1234567); // Set Your own User Id\n                message.setPhoneDetails(phoneDetails); // Phone Details Object\n\n                BeaconResponse response = eventsApi.eventsAppLoginPost(message);\n                return response.getEventId().toString();\n            } catch (Exception e) {\n                return e.toString();\n            }\n        } catch (Exception e) {\n            this.exception = e;\n            return null;\n        }\n    }\n\n    protected void onPostExecute(String response) {\n        Log.d(\nEventId\n,response);\n    }\n}\n\n\n\n\n\n- Set `Api Key`, `Base Path URL` shared with you.\n- Replace `User Id` with your own Users Id\n- Replace phoneDeatils with your own PhoneDetails Class object created above.\n\n\n\n\n\nMake Beacon Call when user logged in.\n\n\n\n\n\nApploginCall applogin = new ApploginCall();\nString[] param = new String[]{};\napplogin.execute(param);\n\n\n\n\n\nUser Logout Call\n\n\n\n\nCreate an Async Task for User Logout Beacon Call\n\n\n\n\n\nclass ApplogoutCall extends AsyncTask\nString, Void, String\n {\n    private Exception exception;\n\n    protected String doInBackground(String... urls) {\n        try {\n            EventsApi eventsApi = new EventsApi();\n            eventsApi.addHeader(\nContent-Type\n,\napplication/json\n);\n            eventsApi.addHeader(\nAccept\n,\napplication/json\n);\n            eventsApi.addHeader(\napikey\n, \nAPI_KEY\n); // Set your own Api Key\n\n            eventsApi.setBasePath(\nhttp://api.octomatic.in\n); // Set Base Path\n            try {\n                Message message = new Message();\n                message.setUserId(1234567); // Set Your own User Id\n                message.setPhoneDetails(phoneDetails); // Phone Details Object\n                BeaconResponse response = eventsApi.eventsAppLogoutPost(message);\n                return response.getEventId().toString();\n            } catch (Exception e) {\n                return e.toString();\n            }\n        } catch (Exception e) {\n            this.exception = e;\n            return null;\n        }\n    }\n\n    protected void onPostExecute(String response) {\n        Log.d(\nEventId\n,response);\n    }\n}\n\n\n\n\n\n- Set `Api Key`, `Base Path URL` shared with you.\n- Replace `User Id` with your own Users Id\n- Replace phoneDeatils with your own PhoneDetails Class object created above.\n\n\n\n\n\nMake Beacon Call when user logged out.\n\n\n\n\n\nApplogoutCall applogout = new ApplogoutCall();\nString[] param = new String[]{};\napplogout.execute(param);\n\n\n\n\n\nUser Pageview Call\n\n\n\n\nCreate an Async Task for User Pageview Beacon Call\n\n\n\n\n\nclass AppPageViewCall extends AsyncTask\nString, Void, String\n {\n    private Exception exception;\n\n    protected String doInBackground(String... urls) {\n        try {\n            EventsApi eventsApi = new EventsApi();\n            eventsApi.addHeader(\nContent-Type\n,\napplication/json\n);\n            eventsApi.addHeader(\nAccept\n,\napplication/json\n);\n            eventsApi.addHeader(\napikey\n, \nAPI_KEY\n); // Set your own Api Key\n\n            eventsApi.setBasePath(\nhttp://api.octomatic.in\n); // Set Base Path\n            try {\n                PageViewMessage message = new PageViewMessage();\n                message.setUserId(1234567); // Set Your own User Id\n                message.setPhoneDetails(phoneDetails); // Phone Details Object\n\n                message.setRouteUrl(\n/Home/DealsOfTheDay/34\n); // Page URL\n\n                List\nString\n cat = new ArrayList\nString\n();\n                cat.add(\nhandbags\n); // Multiple Page Category\n                cat.add(\nindian\n); // Multiple Page Category\n\n                message.setCategories(cat);\n\n                List\nString\n tags = new ArrayList\nString\n();\n                tags.add(\nhandbags\n); // Multiple Page Tags\n                tags.add(\nindian\n); // Multiple Page Tags\n                message.setTags(tags);\n\n                BeaconResponse response = eventsApi.eventsPageViewPost(message);\n                return response.getEventId().toString();\n            } catch (Exception e) {\n                return e.toString();\n            }\n        } catch (Exception e) {\n            this.exception = e;\n            return null;\n        }\n    }\n\n    protected void onPostExecute(String response) {\n        Log.d(\nEventId\n,response);\n        responseText.setText(response);\n    }\n}\n\n\n\n\n\n- Set `Api Key`, `Base Path URL` shared with you.\n- Replace `User Id` with your own Users Id\n- Replace `Page Url`, `categories`, `tags` with the page details\n- Replace phoneDeatils with your own PhoneDetails Class object created above.\n\n\n\n\n\nMake Beacon Call when user logged out.\n\n\n\n\n\nAppPageViewCall pageviewCall = new AppPageViewCall();\nString[] param = new String[]{};\npageviewCall.execute(param);\n\n\n\n\n\nUser Product Pageview Call\n\n\n\n\nCreate an Async Task for User Product Pageview Beacon Call\n\n\n\n\n\nclass AppProductPageViewCall extends AsyncTask\nString, Void, String\n {\n    private Exception exception;\n\n    protected String doInBackground(String... urls) {\n        try {\n            EventsApi eventsApi = new EventsApi();\n            eventsApi.addHeader(\nContent-Type\n,\napplication/json\n);\n            eventsApi.addHeader(\nAccept\n,\napplication/json\n);\n            eventsApi.addHeader(\napikey\n, \nAPI_KEY\n); // Set your own Api Key\n\n            eventsApi.setBasePath(\nhttp://api.octomatic.in\n); // Set Base Path\n            try {\n                ProductPageViewMessage message = new ProductPageViewMessage();\n                message.setUserId(1234567); // Set Your own User Id\n                message.setPhoneDetails(phoneDetails); // Phone Details Object\n\n                message.setRouteUrl(\n/Home/DealsOfTheDay/34\n); // Page URL\n\n                List\nString\n cat = new ArrayList\nString\n();\n                cat.add(\nhandbags\n); // Multiple Page Category\n                cat.add(\nindian\n); // Multiple Page Category\n\n                message.setCategories(cat);\n\n                List\nString\n tags = new ArrayList\nString\n();\n                tags.add(\nhandbags\n); // Multiple Page Tags\n                tags.add(\nindian\n); // Multiple Page Tags\n                message.setTags(tags);\n                message.setPrice(99.99f); // Set Product Price\n                message.setProductId(12345); // Set Product ID\n                message.setProductName(\nPRODUCT_NAME\n); // Set Product Name\n\n                BeaconResponse response = eventsApi.eventsProductpageViewPost(message);\n                return response.getEventId().toString();\n            } catch (Exception e) {\n                return e.toString();\n            }\n        } catch (Exception e) {\n            this.exception = e;\n            return null;\n        }\n    }\n\n    protected void onPostExecute(String response) {\n        Log.d(\nEventId\n,response);\n        responseText.setText(response);\n    }\n}\n\n\n\n\n\n- Set `Api Key`, `Base Path URL` shared with you.\n- Replace `User Id` with your own Users Id\n- Replace `Page Url`, `categories`, `tags` with the page details\n- Replace `Product ID`, `Product Name`, `Product Price` with product details\n- Replace phoneDeatils with your own PhoneDetails Class object created above.\n\n\n\n\n\nMake Beacon Call when user logged out.\n\n\n\n\n\nAppProductPageViewCall beaconCall = new AppProductPageViewCall();\nString[] param = new String[]{};\nbeaconCall.execute(param);\n\n\n\n\n\nUser GCM Token Update Call\n\n\n\n\nCreate an Async Task for GCM Token Update Beacon Call\n\n\n\n\n\nclass PushNotificationCall extends AsyncTask\nString, Void, String\n {\n    private Exception exception;\n\n    protected String doInBackground(String... data) {\n        try {\n\n            PushnotificationApi pushApi = new PushnotificationApi();\n            pushApi.addHeader(\nContent-Type\n,\napplication/json\n);\n            pushApi.addHeader(\nAccept\n,\napplication/json\n);\n            pushApi.addHeader(\napikey\n, \nAPI_KEY\n); // Set your own Api Key\n\n            pushApi.setBasePath(\nhttp://api.octomatic.in\n); // Set Base Path\n\n            try {\n                UpdatePushToken message = new UpdatePushToken();\n                message.setUserId(1234567); // Set Your own User Id\n                message.setPhoneDetails(phoneDetails); // Phone Details Object\n\n                message.setPushToken(GCMToken); // Replace with your Google GCM Registration Token\n                message.setPushKey(\nAbCdEfGhIjKl0123-4_56789mnop\n); // Replace with your Google GCM API Key\n\n                message.setNotificationType(1); // Android - 1\n\n                BeaconResponse response = pushApi.updatePushTokenPost(message);\n                return response.getEventId().toString();\n            } catch (Exception e) {\n                return e.toString();\n            }\n        } catch (Exception e) {\n            this.exception = e;\n            return null;\n        }\n    }\n\n    protected void onPostExecute(String response) {\n        Log.d(\nGCM Token Updated\n,response);\n    }\n}\n\n\n\n\n\n- Set `Api Key`, `Base Path URL` shared with you.\n- Replace `User Id` with your own Users Id\n- Replace `GCMToken`, `GCM API Key` with your Google GCM Registration Token \n your Google api key\n- Replace phoneDeatils with your own PhoneDetails Class object created above.\n\n\n\n\n\nMake Beacon Call when GCM registered.\n\n\n\n\n```\n\n\nPushNotificationCall beaconcall = new PushNotificationCall();\nString[] param = new String[]{};\nbeaconcall.execute(param);\n\n\nI```", 
            "title": "android, native"
        }, 
        {
            "location": "/androidGCMStarterKit/index.html#android_octo_starter_kit", 
            "text": "This kit covers an app published on Android platform and uses GCM for push notifications.    Android, OCTO Starter Kit  Get Started  Github Clone  Libraries    Setup Capabilities  GeoLocation  GCM Activation  GCM Setup  Phone Details  Octo Libraries    How to use  App Init Call  User Login Call  User Logout Call  User Pageview Call  User Product Pageview Call  User GCM Token Update Call", 
            "title": "Android, OCTO Starter Kit"
        }, 
        {
            "location": "/androidGCMStarterKit/index.html#get_started", 
            "text": "", 
            "title": "Get Started"
        }, 
        {
            "location": "/androidGCMStarterKit/index.html#github_clone", 
            "text": "The complete source code of this app is available at our Github.  https://github.com/octoai/StarterKit-Android-Native . You should clone this and keep it ready for reference.  You can also  download  the starter kit from here. This starter kit contains a working sample of code that takes all permissions from users, and sends appropriate API calls at appropriate times.  If you already have an app, chances are most of the steps would have been already done. However, it is advised to go through the document and remove any inconsistencies.  The code snippets mentioned here can be found in the starter kit. Should you have any difficulty understaning the flow, the starter kit code should help you out.", 
            "title": "Github Clone"
        }, 
        {
            "location": "/androidGCMStarterKit/index.html#libraries", 
            "text": "Should you want to download the native library, here is the link:   Android Native Libraries", 
            "title": "Libraries"
        }, 
        {
            "location": "/androidGCMStarterKit/index.html#setup_capabilities", 
            "text": "", 
            "title": "Setup Capabilities"
        }, 
        {
            "location": "/androidGCMStarterKit/index.html#geolocation", 
            "text": "Open AndroidManifest.xml and add  ACCESS_FINE_LOCATION  (Which includes both  ACCESS_FINE_LOCATION  and  ACCESS_COARSE_LOCATION ).  If you are getting network-based location then you need to add  INTERNET  permission too.  Copy the  GPSTracker.java  class file from android starter kit and place it in along with other class files. This file having all the code setup for fetching user location.  Create an object of GPSTracker class  GPSTracker object = new GPSTracker(this);  and start using gps services like  Check GPS services  object.canGetLocation()  Fetch Latitude  object.getLatitude()  Fetch Longitude  object.getLongitude()  Show GPS Settings Alert Box  object.showSettingsAlert()  Stop using GPS services  object.stopUsingGPS()", 
            "title": "GeoLocation"
        }, 
        {
            "location": "/androidGCMStarterKit/index.html#gcm_activation", 
            "text": "Create an application from  Google Developers Console .  Activate GCM API.  Then, generate a new server key.  Generate Json file for downstream messages in android application.  Generate .  Place the Json file in ' app/ ' directory of your android application.", 
            "title": "GCM Activation"
        }, 
        {
            "location": "/androidGCMStarterKit/index.html#gcm_setup", 
            "text": "Follow the link to get started with  Google Android GCM Client .", 
            "title": "GCM Setup"
        }, 
        {
            "location": "/androidGCMStarterKit/index.html#phone_details", 
            "text": "Import  import android.os.Build;  to fetch device details as follows  Build.MANUFACTURER  to find device manufacturer  Build.ID  to find device id  Build.MODEL  to find device model", 
            "title": "Phone Details"
        }, 
        {
            "location": "/androidGCMStarterKit/index.html#octo_libraries", 
            "text": "Import all files from ' libs ' folder from starter kit. List of files :  commons-codec-1.6.jar  commons-logging-1.1.3.jar  gson-2.3.1.jar  junit-4.8.1.jar  swagger-android-client-1.0.0.jar  swagger-annotations-1.5.4.jar    Setup dependencies in module app gradle   \next {\n    swagger_annotations_version =  1.5.0 \n    httpclient_version =  4.3.3 \n}\ndependencies {\n    // Default Dependencies\n    compile fileTree(include: ['*.jar'], dir: 'libs')\n    compile 'com.google.android.gms:play-services-gcm:8.4.0'\n    compile 'com.android.support:appcompat-v7:23.2.0'\n    // Dependencies\n    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'\n    androidTestCompile 'com.android.support.test:runner:0.4.1'\n    androidTestCompile 'com.android.support:support-annotations:23.2.0'\n    compile  org.apache.httpcomponents:httpcore:$httpclient_version \n    compile  org.apache.httpcomponents:httpclient:$httpclient_version \n    compile ( org.apache.httpcomponents:httpcore:$httpclient_version ) {\n        exclude(group: 'org.apache.httpcomponents', module: 'httpclient')\n    }\n    compile ( org.apache.httpcomponents:httpmime:$httpclient_version ) {\n        exclude(group: 'org.apache.httpcomponents', module: 'httpclient')\n    }\n}", 
            "title": "Octo Libraries"
        }, 
        {
            "location": "/androidGCMStarterKit/index.html#how_to_use", 
            "text": "Import swagger apis and models using statements   \nimport io.swagger.client.api.*;\nimport io.swagger.client.model.*;   Create a  PhoneDetails  class object   initialize its variables using predefined library methods (fetch location details from GPSTracker)   \nPhoneDetails phoneDetails = new PhoneDetails();\nphoneDetails.setDeviceId(Build.ID);\nphoneDetails.setLatitude(latitude);\nphoneDetails.setLongitude(longitude);\nphoneDetails.setManufacturer(Build.MANUFACTURER);\nphoneDetails.setModel(Build.MODEL);", 
            "title": "How to use"
        }, 
        {
            "location": "/androidGCMStarterKit/index.html#app_init_call", 
            "text": "Create an Async Task for Application Initilization Beacon Call   \nclass AppinitCall extends AsyncTask String, Void, String  {\n\n    private Exception exception;\n\n    protected String doInBackground(String... urls) {\n        try {\n            EventsApi eventsApi = new EventsApi();\n            eventsApi.addHeader( Content-Type , application/json );\n            eventsApi.addHeader( Accept , application/json );\n            eventsApi.addHeader( apikey ,  API_KEY ); // Set your own Api Key\n\n            eventsApi.setBasePath( http://api.octomatic.in ); // Set Base Path\n\n            try {\n                Message message = new Message();\n                message.setUserId(1234567); // Set your own User ID\n                message.setPhoneDetails(phoneDetails); // Phone Details Object\n\n                BeaconResponse response = eventsApi.eventsAppInitPost(message);\n                return response.getEventId().toString();\n            } catch (Exception e) {\n                return e.toString();\n            }\n        } catch (Exception e) {\n            this.exception = e;\n            return null;\n        }\n    }\n\n    protected void onPostExecute(String response) {\n        Log.d( EventId ,response);\n    }\n}  - Set `Api Key`, `Base Path URL` shared with you.\n- Replace `User Id` with your own Users Id\n- Replace phoneDeatils with your own '**PhoneDetails**' Class object created above.   Make Beacon Call when app is initilialized every time user starts application.   \nAppinitCall appinit = new AppinitCall();\nString[] param = new String[]{};\nappinit.execute(param);", 
            "title": "App Init Call"
        }, 
        {
            "location": "/androidGCMStarterKit/index.html#user_login_call", 
            "text": "Create an Async Task for User Login Beacon Call   \nclass ApploginCall extends AsyncTask String, Void, String  {\n\n    private Exception exception;\n\n    protected String doInBackground(String... urls) {\n        try {\n            EventsApi eventsApi = new EventsApi();\n            eventsApi.addHeader( Content-Type , application/json );\n            eventsApi.addHeader( Accept , application/json );\n            eventsApi.addHeader( apikey ,  API_KEY ); // Set your own Api Key\n\n            eventsApi.setBasePath( http://api.octomatic.in ); // Set Base Path\n            try {\n                Message message = new Message();\n                message.setUserId(1234567); // Set Your own User Id\n                message.setPhoneDetails(phoneDetails); // Phone Details Object\n\n                BeaconResponse response = eventsApi.eventsAppLoginPost(message);\n                return response.getEventId().toString();\n            } catch (Exception e) {\n                return e.toString();\n            }\n        } catch (Exception e) {\n            this.exception = e;\n            return null;\n        }\n    }\n\n    protected void onPostExecute(String response) {\n        Log.d( EventId ,response);\n    }\n}  - Set `Api Key`, `Base Path URL` shared with you.\n- Replace `User Id` with your own Users Id\n- Replace phoneDeatils with your own PhoneDetails Class object created above.   Make Beacon Call when user logged in.   \nApploginCall applogin = new ApploginCall();\nString[] param = new String[]{};\napplogin.execute(param);", 
            "title": "User Login Call"
        }, 
        {
            "location": "/androidGCMStarterKit/index.html#user_logout_call", 
            "text": "Create an Async Task for User Logout Beacon Call   \nclass ApplogoutCall extends AsyncTask String, Void, String  {\n    private Exception exception;\n\n    protected String doInBackground(String... urls) {\n        try {\n            EventsApi eventsApi = new EventsApi();\n            eventsApi.addHeader( Content-Type , application/json );\n            eventsApi.addHeader( Accept , application/json );\n            eventsApi.addHeader( apikey ,  API_KEY ); // Set your own Api Key\n\n            eventsApi.setBasePath( http://api.octomatic.in ); // Set Base Path\n            try {\n                Message message = new Message();\n                message.setUserId(1234567); // Set Your own User Id\n                message.setPhoneDetails(phoneDetails); // Phone Details Object\n                BeaconResponse response = eventsApi.eventsAppLogoutPost(message);\n                return response.getEventId().toString();\n            } catch (Exception e) {\n                return e.toString();\n            }\n        } catch (Exception e) {\n            this.exception = e;\n            return null;\n        }\n    }\n\n    protected void onPostExecute(String response) {\n        Log.d( EventId ,response);\n    }\n}  - Set `Api Key`, `Base Path URL` shared with you.\n- Replace `User Id` with your own Users Id\n- Replace phoneDeatils with your own PhoneDetails Class object created above.   Make Beacon Call when user logged out.   \nApplogoutCall applogout = new ApplogoutCall();\nString[] param = new String[]{};\napplogout.execute(param);", 
            "title": "User Logout Call"
        }, 
        {
            "location": "/androidGCMStarterKit/index.html#user_pageview_call", 
            "text": "Create an Async Task for User Pageview Beacon Call   \nclass AppPageViewCall extends AsyncTask String, Void, String  {\n    private Exception exception;\n\n    protected String doInBackground(String... urls) {\n        try {\n            EventsApi eventsApi = new EventsApi();\n            eventsApi.addHeader( Content-Type , application/json );\n            eventsApi.addHeader( Accept , application/json );\n            eventsApi.addHeader( apikey ,  API_KEY ); // Set your own Api Key\n\n            eventsApi.setBasePath( http://api.octomatic.in ); // Set Base Path\n            try {\n                PageViewMessage message = new PageViewMessage();\n                message.setUserId(1234567); // Set Your own User Id\n                message.setPhoneDetails(phoneDetails); // Phone Details Object\n\n                message.setRouteUrl( /Home/DealsOfTheDay/34 ); // Page URL\n\n                List String  cat = new ArrayList String ();\n                cat.add( handbags ); // Multiple Page Category\n                cat.add( indian ); // Multiple Page Category\n\n                message.setCategories(cat);\n\n                List String  tags = new ArrayList String ();\n                tags.add( handbags ); // Multiple Page Tags\n                tags.add( indian ); // Multiple Page Tags\n                message.setTags(tags);\n\n                BeaconResponse response = eventsApi.eventsPageViewPost(message);\n                return response.getEventId().toString();\n            } catch (Exception e) {\n                return e.toString();\n            }\n        } catch (Exception e) {\n            this.exception = e;\n            return null;\n        }\n    }\n\n    protected void onPostExecute(String response) {\n        Log.d( EventId ,response);\n        responseText.setText(response);\n    }\n}  - Set `Api Key`, `Base Path URL` shared with you.\n- Replace `User Id` with your own Users Id\n- Replace `Page Url`, `categories`, `tags` with the page details\n- Replace phoneDeatils with your own PhoneDetails Class object created above.   Make Beacon Call when user logged out.   \nAppPageViewCall pageviewCall = new AppPageViewCall();\nString[] param = new String[]{};\npageviewCall.execute(param);", 
            "title": "User Pageview Call"
        }, 
        {
            "location": "/androidGCMStarterKit/index.html#user_product_pageview_call", 
            "text": "Create an Async Task for User Product Pageview Beacon Call   \nclass AppProductPageViewCall extends AsyncTask String, Void, String  {\n    private Exception exception;\n\n    protected String doInBackground(String... urls) {\n        try {\n            EventsApi eventsApi = new EventsApi();\n            eventsApi.addHeader( Content-Type , application/json );\n            eventsApi.addHeader( Accept , application/json );\n            eventsApi.addHeader( apikey ,  API_KEY ); // Set your own Api Key\n\n            eventsApi.setBasePath( http://api.octomatic.in ); // Set Base Path\n            try {\n                ProductPageViewMessage message = new ProductPageViewMessage();\n                message.setUserId(1234567); // Set Your own User Id\n                message.setPhoneDetails(phoneDetails); // Phone Details Object\n\n                message.setRouteUrl( /Home/DealsOfTheDay/34 ); // Page URL\n\n                List String  cat = new ArrayList String ();\n                cat.add( handbags ); // Multiple Page Category\n                cat.add( indian ); // Multiple Page Category\n\n                message.setCategories(cat);\n\n                List String  tags = new ArrayList String ();\n                tags.add( handbags ); // Multiple Page Tags\n                tags.add( indian ); // Multiple Page Tags\n                message.setTags(tags);\n                message.setPrice(99.99f); // Set Product Price\n                message.setProductId(12345); // Set Product ID\n                message.setProductName( PRODUCT_NAME ); // Set Product Name\n\n                BeaconResponse response = eventsApi.eventsProductpageViewPost(message);\n                return response.getEventId().toString();\n            } catch (Exception e) {\n                return e.toString();\n            }\n        } catch (Exception e) {\n            this.exception = e;\n            return null;\n        }\n    }\n\n    protected void onPostExecute(String response) {\n        Log.d( EventId ,response);\n        responseText.setText(response);\n    }\n}  - Set `Api Key`, `Base Path URL` shared with you.\n- Replace `User Id` with your own Users Id\n- Replace `Page Url`, `categories`, `tags` with the page details\n- Replace `Product ID`, `Product Name`, `Product Price` with product details\n- Replace phoneDeatils with your own PhoneDetails Class object created above.   Make Beacon Call when user logged out.   \nAppProductPageViewCall beaconCall = new AppProductPageViewCall();\nString[] param = new String[]{};\nbeaconCall.execute(param);", 
            "title": "User Product Pageview Call"
        }, 
        {
            "location": "/androidGCMStarterKit/index.html#user_gcm_token_update_call", 
            "text": "Create an Async Task for GCM Token Update Beacon Call   \nclass PushNotificationCall extends AsyncTask String, Void, String  {\n    private Exception exception;\n\n    protected String doInBackground(String... data) {\n        try {\n\n            PushnotificationApi pushApi = new PushnotificationApi();\n            pushApi.addHeader( Content-Type , application/json );\n            pushApi.addHeader( Accept , application/json );\n            pushApi.addHeader( apikey ,  API_KEY ); // Set your own Api Key\n\n            pushApi.setBasePath( http://api.octomatic.in ); // Set Base Path\n\n            try {\n                UpdatePushToken message = new UpdatePushToken();\n                message.setUserId(1234567); // Set Your own User Id\n                message.setPhoneDetails(phoneDetails); // Phone Details Object\n\n                message.setPushToken(GCMToken); // Replace with your Google GCM Registration Token\n                message.setPushKey( AbCdEfGhIjKl0123-4_56789mnop ); // Replace with your Google GCM API Key\n\n                message.setNotificationType(1); // Android - 1\n\n                BeaconResponse response = pushApi.updatePushTokenPost(message);\n                return response.getEventId().toString();\n            } catch (Exception e) {\n                return e.toString();\n            }\n        } catch (Exception e) {\n            this.exception = e;\n            return null;\n        }\n    }\n\n    protected void onPostExecute(String response) {\n        Log.d( GCM Token Updated ,response);\n    }\n}  - Set `Api Key`, `Base Path URL` shared with you.\n- Replace `User Id` with your own Users Id\n- Replace `GCMToken`, `GCM API Key` with your Google GCM Registration Token   your Google api key\n- Replace phoneDeatils with your own PhoneDetails Class object created above.   Make Beacon Call when GCM registered.   ```  PushNotificationCall beaconcall = new PushNotificationCall();\nString[] param = new String[]{};\nbeaconcall.execute(param);  I```", 
            "title": "User GCM Token Update Call"
        }, 
        {
            "location": "/cordovaOctoStarterKit/index.html", 
            "text": "Cordova Android, OCTO Starter Kit\n\n\nThis kit covers an app published on Android platform and uses GCM for push notifications.\n\n\nGet Started\n\n\nGithub Clone\n\n\nThe complete source code of this app is available at our Github. \nhttps://github.com/octoai/StarterKit-Android-Cordova\n. You should clone this and keep it ready for reference.\n\n\nAlternatively you can also \ndownload\n the starter kit from here. This starter kit contains a working sample of code that takes all permissions from users, and sends appropriate API calls at appropriate times.\n\n\nIf you already have an app, chances are most of the steps would have been already done. However, it is advised to go through the document and remove any inconsistencies.\n\n\nThe code snippets mentioned here can be found in the starter kit. Should you have any difficulty understaning the flow, the starter kit code should help you out.\n\n\nSetup Capabilities\n\n\nGeoLocation Setup\n\n\n\n\nAdd Cordova Plugin : \ncordova-plugin-geolocation\n\n\n\n\n    cordova plugin add cordova-plugin-geolocation\n\n\n\n\n\n\n\nGet Geo location details using its predefined methods\n\n\n\n\n\n    navigator.geolocation.getCurrentPosition(function(position) {\n        var latitude = position.coords.latitude;\n        var longitude = position.coords.longitude;\n    }, function(error) {\n        // Unable to find location\n    });\n\n\n\n\n\nGCM Setup\n\n\n\n\nCreate an application from \nGoogle Developers Console\n.\n\n\nActivate GCM API.\n\n\nYour Google App \nProject number\n is your \nSENDER_ID\n.\n\n\nAdd Cordova Plugin : \nphonegap-plugin-push\n\n\nReplace SENDER_ID with your own\n\n\n\n\n\n\n\n\n    cordova plugin add phonegap-plugin-push --variable SENDER_ID=\nXXXXXXX\n\n\n\n\n\n\n\n\nGet User GCM registration details to send or receive notifications in future\n\n\n\n\n\n    var push = PushNotification.init({\n        \nandroid\n: {\n            \nsenderID\n: \n123456789\n // Replace it with your own Google App Sender ID\n        }\n    });\n\n    push.on('registration', function(data) {\n       console.log(data.registrationId); // User GCM registration token\n    });\n\n    // On Receiving Notification\n    push.on('notification', function(data) {\n        console.log(\nGCM Debugging\n);\n        console.log(data);\n        console.log(data.message);\n        console.log(data.title);\n        console.log(data.count);\n        console.log(data.sound);\n        console.log(data.image);\n        console.log(data.additionalData);\n    });\n\n    push.on('error', function(e) {\n        // Handle Error \n        // e.message\n    });\n\n\n\n\n\nGet Phone Details Setup\n\n\n\n\nAdd Cordova Plugin : \ncordova-plugin-device\n\n\n\n\n    cordova plugin add cordova-plugin-device\n\n\n\n\n\n\n\nGet Device details using global \ndevice\n variable defined by the plugin\n\n\n\n\n\n    var deviceId = device.uuid;\n    var manufacturer = device.manufacturer;\n    var model = device.model;\n\n\n\n\n\nHow to use\n\n\nPhone Details Json\n\n\n\n\nCreate a \nPhoneDetails\n variable \n initialize Json variables\n\n\nFetch location details from GeoLocation API explained above.\n\n\nFetch device details using cordova plugin as explained above.\n\n\n\n\n\n\n\n\n\n    var phoneDetails = {\n        \ndeviceId\n: device.uuid,\n        \nmanufacturer\n: device.manufacturer,\n        \nmodel\n: device.model,\n        \nlatitude\n: latitude,\n        \nlongitude\n: longitude\n    }\n\n\n\n\n\n\n\nApp Init Call\n\n\n\n\nDo an AJAX POST call to hit octo api when application starts\n\n\nReplace \nphoneDetails\n with your Json type phone details variable\n\n\nReplace \nUser ID\n with your own User's ID\n\n\nReplace \nurl base address\n with \nOcto API Base Address\n shared with you\n\n\nSet \nAPI Key\n shared with you\n\n\n\n\n\n\n\n\n\n    var data = JSON.stringify({\n        \nuserId\n: 1234567, // Replace your User ID\n        \nphoneDetails\n: phoneDetails // Replace phone details variable\n    });\n\n    $.ajax({\n        url: 'http://api.octomatic.in/events/app.init/', // Replace Base Address\n        type : 'POST',\n        headers: { \n            \nContent-Type\n: \napplication/json\n,\n            \napikey\n: \nAPI_KEY\n // Replace your API Key\n        },\n        data: data\n    });\n\n\n\n\n\n\n\nApp Login Call\n\n\n\n\nDo an AJAX POST call to hit octo api when user LoggedIn\n\n\nReplace \nphoneDetails\n with your Json type phone details variable\n\n\nReplace \nUser ID\n with your own User's ID\n\n\nReplace \nurl base address\n with \nOcto API Base Address\n shared with you\n\n\nSet \nAPI Key\n shared with you\n\n\n\n\n\n\n\n\n\n    var loginData = JSON.stringify({\n        \nuserId\n: 1234567, // Replace your User ID\n        \nphoneDetails\n: phoneDetails // Replace phone details variable\n    });\n\n    $.ajax({\n        url: 'http://api.octomatic.in/events/app.login/', // Replace Base Address\n        type : 'POST',\n        headers: { \n            \nContent-Type\n: \napplication/json\n,\n            \napikey\n: \nAPI_KEY\n // Replace your API Key\n        },\n        data: loginData\n    });\n\n\n\n\n\n\n\nApp Logout Call\n\n\n\n\nDo an AJAX POST call to hit octo api when user LoggedOut\n\n\nReplace \nphoneDetails\n with your Json type phone details variable\n\n\nReplace \nUser ID\n with your own User's ID\n\n\nReplace \nurl base address\n with \nOcto API Base Address\n shared with you\n\n\nSet \nAPI Key\n shared with you\n\n\n\n\n\n\n\n\n\n    var logoutData = JSON.stringify({\n        \nuserId\n: 1234567, // Replace your User ID\n        \nphoneDetails\n: phoneDetails // Replace phone details variable\n    });\n\n    $.ajax({\n        url: 'http://api.octomatic.in/events/app.logout/', // Replace Base Address\n        type : 'POST',\n        headers: { \n            \nContent-Type\n: \napplication/json\n,\n            \napikey\n: \nAPI_KEY\n // Replace your API Key\n        },\n        data: logoutData\n    });\n\n\n\n\n\n\n\nApp Pageview Call\n\n\n\n\nDo an AJAX POST call to hit octo api when user request a page\n\n\nReplace \nphoneDetails\n with your Json type phone details variable\n\n\nReplace \nUser ID\n with your own User's ID\n\n\nReplace \nurl base address\n with \nOcto API Base Address\n shared with you\n\n\nSet \nAPI Key\n shared with you\n\n\nSet \nCategories\n, \ntags\n, \nrouteUrl\n* with Page Details \n\n\n\n\n\n\n\n\n\n    var pageview_data = JSON.stringify({\n        \nuserId\n: 1234567, // Replace your User ID\n        \nphoneDetails\n: phoneDetails, // Replace phone details variable\n        \nrouteUrl\n: \n/Home/DealsOfTheDay/34\n, // Replace it with your App Page URL\n        \ncategories\n: [\n            \nshopping\n,\n            \nhandbags\n\n        ], // Replace it with Page Categories\n        \ntags\n: [\n            \nhandbags\n,\n            \nrecommended\n\n        ] // Replace it with Page Tags\n    });\n\n    $.ajax({\n        url: 'http://api.octomatic.in/events/page.view/', // Replace Base Address\n        type : 'POST',\n        headers: { \n            \nContent-Type\n: \napplication/json\n,\n            \napikey\n: \nAPI_KEY\n // Replace your API Key\n        },\n        data: pageview_data\n    });\n\n\n\n\n\n\n\nApp Product Pageview Call\n\n\n\n\nDo an AJAX POST call to hit octo api when user request a product page\n\n\nReplace \nphoneDetails\n with your Json type phone details variable\n\n\nReplace \nUser ID\n with your own User's ID\n\n\nReplace \nurl base address\n with \nOcto API Base Address\n shared with you\n\n\nSet \nAPI Key\n shared with you\n\n\nSet \nCategories\n, \ntags\n, \nrouteUrl\n* according to your Page Details \n\n\nSet \nProductId\n, \nProductName\n, \nPrice\n according to your Product Deatils\n\n\n\n\n\n\n\n\n\n    var productdata = JSON.stringify({\n        \nuserId\n: 1234567, // Replace your User ID\n        \nphoneDetails\n: phoneDetails, // Replace phone details variable\n        \nrouteUrl\n: \n/Home/DealsOfTheDay/34\n, // Replace it with your App Page URL\n        \ncategories\n: [\n            \nshopping\n,\n            \nhandbags\n\n        ], // Replace it with Page Categories\n        \ntags\n: [\n            \nhandbags\n,\n            \nrecommended\n\n        ], // Replace it with Page Tags\n        \nproductId\n: 12345, // Set Product Id\n        \nproductName\n: \nSmartphone Series S01\n, // Set Product Name\n        \nprice\n: 99.99 // Set Product Price\n    });\n\n    $.ajax({\n        url: 'http://api.octomatic.in/events/productpage.view/', // Replace Base Address\n        type : 'POST',\n        headers: { \n            \nContent-Type\n: \napplication/json\n,\n            \napikey\n: \nAPI_KEY\n // Replace your API Key\n        },\n        data: productdata\n    });\n\n\n\n\n\n\n\nApp GCM Token Update Call\n\n\n\n\nDo an AJAX POST call to hit octo api when user registered for GCM\n\n\nReplace \nphoneDetails\n with your Json type phone details variable\n\n\nReplace \nUser ID\n with your own User's ID\n\n\nReplace \nurl base address\n with \nOcto API Base Address\n shared with you\n\n\nSet \nAPI Key\n shared with you\n\n\nSet \npushToken\n with User's GCM registration Token\n\n\nReplace \npushKey\n with your Google GCM Api Key\n\n\nSet \nnotificationType\n 0 for ios, 1 for android\n\n\n\n\n\n\n\n\n\n    var gcmdata = JSON.stringify({\n        \nuserId\n: 1234567, // Replace your User ID\n        \npushToken\n: \n##############\n, // Replace with your User's Google GCM Registration Token\n        \npushKey\n: \nAbCdEfGhIjKl0123-4_56789mnop\n,  // Replace with your Google GCM Key\n        \nnotificationType\n: 1, // 1 for android\n        \nphoneDetails\n: phoneDetails // Replace phoneDetails variable\n    });\n\n    $.ajax({\n        url: 'http://api.octomatic.in/update_push_token/', // Replace Base Path\n        type : 'POST',\n        headers: { \n            \nContent-Type\n: \napplication/json\n,\n            \napikey\n: \nAPI_KEY\n // Replace OCTO API Key\n        },\n        data: gcmdata\n    });", 
            "title": "android, cordova"
        }, 
        {
            "location": "/cordovaOctoStarterKit/index.html#cordova_android_octo_starter_kit", 
            "text": "This kit covers an app published on Android platform and uses GCM for push notifications.", 
            "title": "Cordova Android, OCTO Starter Kit"
        }, 
        {
            "location": "/cordovaOctoStarterKit/index.html#get_started", 
            "text": "", 
            "title": "Get Started"
        }, 
        {
            "location": "/cordovaOctoStarterKit/index.html#github_clone", 
            "text": "The complete source code of this app is available at our Github.  https://github.com/octoai/StarterKit-Android-Cordova . You should clone this and keep it ready for reference.  Alternatively you can also  download  the starter kit from here. This starter kit contains a working sample of code that takes all permissions from users, and sends appropriate API calls at appropriate times.  If you already have an app, chances are most of the steps would have been already done. However, it is advised to go through the document and remove any inconsistencies.  The code snippets mentioned here can be found in the starter kit. Should you have any difficulty understaning the flow, the starter kit code should help you out.", 
            "title": "Github Clone"
        }, 
        {
            "location": "/cordovaOctoStarterKit/index.html#setup_capabilities", 
            "text": "", 
            "title": "Setup Capabilities"
        }, 
        {
            "location": "/cordovaOctoStarterKit/index.html#geolocation_setup", 
            "text": "Add Cordova Plugin :  cordova-plugin-geolocation       cordova plugin add cordova-plugin-geolocation   Get Geo location details using its predefined methods   \n    navigator.geolocation.getCurrentPosition(function(position) {\n        var latitude = position.coords.latitude;\n        var longitude = position.coords.longitude;\n    }, function(error) {\n        // Unable to find location\n    });", 
            "title": "GeoLocation Setup"
        }, 
        {
            "location": "/cordovaOctoStarterKit/index.html#gcm_setup", 
            "text": "Create an application from  Google Developers Console .  Activate GCM API.  Your Google App  Project number  is your  SENDER_ID .  Add Cordova Plugin :  phonegap-plugin-push  Replace SENDER_ID with your own         cordova plugin add phonegap-plugin-push --variable SENDER_ID= XXXXXXX    Get User GCM registration details to send or receive notifications in future   \n    var push = PushNotification.init({\n         android : {\n             senderID :  123456789  // Replace it with your own Google App Sender ID\n        }\n    });\n\n    push.on('registration', function(data) {\n       console.log(data.registrationId); // User GCM registration token\n    });\n\n    // On Receiving Notification\n    push.on('notification', function(data) {\n        console.log( GCM Debugging );\n        console.log(data);\n        console.log(data.message);\n        console.log(data.title);\n        console.log(data.count);\n        console.log(data.sound);\n        console.log(data.image);\n        console.log(data.additionalData);\n    });\n\n    push.on('error', function(e) {\n        // Handle Error \n        // e.message\n    });", 
            "title": "GCM Setup"
        }, 
        {
            "location": "/cordovaOctoStarterKit/index.html#get_phone_details_setup", 
            "text": "Add Cordova Plugin :  cordova-plugin-device       cordova plugin add cordova-plugin-device   Get Device details using global  device  variable defined by the plugin   \n    var deviceId = device.uuid;\n    var manufacturer = device.manufacturer;\n    var model = device.model;", 
            "title": "Get Phone Details Setup"
        }, 
        {
            "location": "/cordovaOctoStarterKit/index.html#how_to_use", 
            "text": "", 
            "title": "How to use"
        }, 
        {
            "location": "/cordovaOctoStarterKit/index.html#phone_details_json", 
            "text": "Create a  PhoneDetails  variable   initialize Json variables  Fetch location details from GeoLocation API explained above.  Fetch device details using cordova plugin as explained above.     \n    var phoneDetails = {\n         deviceId : device.uuid,\n         manufacturer : device.manufacturer,\n         model : device.model,\n         latitude : latitude,\n         longitude : longitude\n    }", 
            "title": "Phone Details Json"
        }, 
        {
            "location": "/cordovaOctoStarterKit/index.html#app_init_call", 
            "text": "Do an AJAX POST call to hit octo api when application starts  Replace  phoneDetails  with your Json type phone details variable  Replace  User ID  with your own User's ID  Replace  url base address  with  Octo API Base Address  shared with you  Set  API Key  shared with you     \n    var data = JSON.stringify({\n         userId : 1234567, // Replace your User ID\n         phoneDetails : phoneDetails // Replace phone details variable\n    });\n\n    $.ajax({\n        url: 'http://api.octomatic.in/events/app.init/', // Replace Base Address\n        type : 'POST',\n        headers: { \n             Content-Type :  application/json ,\n             apikey :  API_KEY  // Replace your API Key\n        },\n        data: data\n    });", 
            "title": "App Init Call"
        }, 
        {
            "location": "/cordovaOctoStarterKit/index.html#app_login_call", 
            "text": "Do an AJAX POST call to hit octo api when user LoggedIn  Replace  phoneDetails  with your Json type phone details variable  Replace  User ID  with your own User's ID  Replace  url base address  with  Octo API Base Address  shared with you  Set  API Key  shared with you     \n    var loginData = JSON.stringify({\n         userId : 1234567, // Replace your User ID\n         phoneDetails : phoneDetails // Replace phone details variable\n    });\n\n    $.ajax({\n        url: 'http://api.octomatic.in/events/app.login/', // Replace Base Address\n        type : 'POST',\n        headers: { \n             Content-Type :  application/json ,\n             apikey :  API_KEY  // Replace your API Key\n        },\n        data: loginData\n    });", 
            "title": "App Login Call"
        }, 
        {
            "location": "/cordovaOctoStarterKit/index.html#app_logout_call", 
            "text": "Do an AJAX POST call to hit octo api when user LoggedOut  Replace  phoneDetails  with your Json type phone details variable  Replace  User ID  with your own User's ID  Replace  url base address  with  Octo API Base Address  shared with you  Set  API Key  shared with you     \n    var logoutData = JSON.stringify({\n         userId : 1234567, // Replace your User ID\n         phoneDetails : phoneDetails // Replace phone details variable\n    });\n\n    $.ajax({\n        url: 'http://api.octomatic.in/events/app.logout/', // Replace Base Address\n        type : 'POST',\n        headers: { \n             Content-Type :  application/json ,\n             apikey :  API_KEY  // Replace your API Key\n        },\n        data: logoutData\n    });", 
            "title": "App Logout Call"
        }, 
        {
            "location": "/cordovaOctoStarterKit/index.html#app_pageview_call", 
            "text": "Do an AJAX POST call to hit octo api when user request a page  Replace  phoneDetails  with your Json type phone details variable  Replace  User ID  with your own User's ID  Replace  url base address  with  Octo API Base Address  shared with you  Set  API Key  shared with you  Set  Categories ,  tags ,  routeUrl * with Page Details      \n    var pageview_data = JSON.stringify({\n         userId : 1234567, // Replace your User ID\n         phoneDetails : phoneDetails, // Replace phone details variable\n         routeUrl :  /Home/DealsOfTheDay/34 , // Replace it with your App Page URL\n         categories : [\n             shopping ,\n             handbags \n        ], // Replace it with Page Categories\n         tags : [\n             handbags ,\n             recommended \n        ] // Replace it with Page Tags\n    });\n\n    $.ajax({\n        url: 'http://api.octomatic.in/events/page.view/', // Replace Base Address\n        type : 'POST',\n        headers: { \n             Content-Type :  application/json ,\n             apikey :  API_KEY  // Replace your API Key\n        },\n        data: pageview_data\n    });", 
            "title": "App Pageview Call"
        }, 
        {
            "location": "/cordovaOctoStarterKit/index.html#app_product_pageview_call", 
            "text": "Do an AJAX POST call to hit octo api when user request a product page  Replace  phoneDetails  with your Json type phone details variable  Replace  User ID  with your own User's ID  Replace  url base address  with  Octo API Base Address  shared with you  Set  API Key  shared with you  Set  Categories ,  tags ,  routeUrl * according to your Page Details   Set  ProductId ,  ProductName ,  Price  according to your Product Deatils     \n    var productdata = JSON.stringify({\n         userId : 1234567, // Replace your User ID\n         phoneDetails : phoneDetails, // Replace phone details variable\n         routeUrl :  /Home/DealsOfTheDay/34 , // Replace it with your App Page URL\n         categories : [\n             shopping ,\n             handbags \n        ], // Replace it with Page Categories\n         tags : [\n             handbags ,\n             recommended \n        ], // Replace it with Page Tags\n         productId : 12345, // Set Product Id\n         productName :  Smartphone Series S01 , // Set Product Name\n         price : 99.99 // Set Product Price\n    });\n\n    $.ajax({\n        url: 'http://api.octomatic.in/events/productpage.view/', // Replace Base Address\n        type : 'POST',\n        headers: { \n             Content-Type :  application/json ,\n             apikey :  API_KEY  // Replace your API Key\n        },\n        data: productdata\n    });", 
            "title": "App Product Pageview Call"
        }, 
        {
            "location": "/cordovaOctoStarterKit/index.html#app_gcm_token_update_call", 
            "text": "Do an AJAX POST call to hit octo api when user registered for GCM  Replace  phoneDetails  with your Json type phone details variable  Replace  User ID  with your own User's ID  Replace  url base address  with  Octo API Base Address  shared with you  Set  API Key  shared with you  Set  pushToken  with User's GCM registration Token  Replace  pushKey  with your Google GCM Api Key  Set  notificationType  0 for ios, 1 for android     \n    var gcmdata = JSON.stringify({\n         userId : 1234567, // Replace your User ID\n         pushToken :  ############## , // Replace with your User's Google GCM Registration Token\n         pushKey :  AbCdEfGhIjKl0123-4_56789mnop ,  // Replace with your Google GCM Key\n         notificationType : 1, // 1 for android\n         phoneDetails : phoneDetails // Replace phoneDetails variable\n    });\n\n    $.ajax({\n        url: 'http://api.octomatic.in/update_push_token/', // Replace Base Path\n        type : 'POST',\n        headers: { \n             Content-Type :  application/json ,\n             apikey :  API_KEY  // Replace OCTO API Key\n        },\n        data: gcmdata\n    });", 
            "title": "App GCM Token Update Call"
        }, 
        {
            "location": "/ApiDoc/index.html", 
            "text": "Octo Enterprise API\n\n\n\n\n\n\nOcto Enterprise API\n\n\nOverview\n\n\nVersion information\n\n\nURI scheme\n\n\nConsumes\n\n\nProduces\n\n\n\n\n\n\nSecurity\n\n\napikey\n\n\n\n\n\n\nPaths\n\n\nPost an app init event.\n\n\nDescription\n\n\nParameters\n\n\nResponses\n\n\nTags\n\n\ncurl (Mobile Device)\n\n\ncurl (Desktop Web)\n\n\n\n\n\n\nPost an app login event.\n\n\nDescription\n\n\nParameters\n\n\nResponses\n\n\nTags\n\n\ncurl (Mobile Device)\n\n\ncurl (Desktop Web)\n\n\n\n\n\n\nPost an app logout event.\n\n\nDescription\n\n\nParameters\n\n\nResponses\n\n\nTags\n\n\ncurl (Mobile Device)\n\n\ncurl (Desktop Web)\n\n\n\n\n\n\nPost a page view event.\n\n\nDescription\n\n\nParameters\n\n\nResponses\n\n\nConsumes\n\n\nProduces\n\n\nTags\n\n\ncurl (Mobile Device)\n\n\ncurl (Desktop Web)\n\n\n\n\n\n\nPost a product page view event.\n\n\nDescription\n\n\nParameters\n\n\nResponses\n\n\nTags\n\n\ncurl (Mobile Device)\n\n\ncurl (Desktop Web)\n\n\n\n\n\n\nUpdate push token for a user device.\n\n\nDescription\n\n\nParameters\n\n\nResponses\n\n\nTags\n\n\ncurl (only Mobile Device)\n\n\n\n\n\n\n\n\n\n\nDefinitions\n\n\nBeaconResponse\n\n\nError\n\n\nMessage\n\n\nPageViewMessage\n\n\nPhoneDetails\n\n\nProductPageViewMessage\n\n\nUpdatePushToken\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOverview\n\n\nIntegrate with Octo Enterprise using our RESTful APIs.\n\n\nVersion information\n\n\nVersion: 1.0.0\n\n\nURI scheme\n\n\n\n\nHost: api.octomatic.in\n\n\nBasePath: /\n\n\nSchemes: HTTP\n\n\n\n\nConsumes\n\n\n\n\napplication/json\n\n\n\n\nProduces\n\n\n\n\napplication/json\n\n\n\n\nSecurity\n\n\napikey\n\n\n\n\n\n\n\n\nName\n\n\nValue\n\n\nIn\n\n\n\n\n\n\n\n\n\n\napikey\n\n\nYour Octomatic Enterprise API Key\n\n\nHTTP Header\n\n\n\n\n\n\n\n\nPaths\n\n\nPost an app init event.\n\n\nPOST /events/app.init/\n\n\n\n\nDescription\n\n\nEvent fired when app is initiated. Everytime app comes to foreground, this event should be fired with all possible values.\n\n\nParameters\n\n\n\n\n\n\n\n\nType\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nBodyParameter\n\n\nbody\n\n\nUser ID\n\n\ntrue\n\n\nMessage\n\n\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nHTTP Code\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n200\n\n\nReturns the UUID for the event.\n\n\nBeaconResponse\n\n\n\n\n\n\ndefault\n\n\nUnexpected Error\n\n\nError\n\n\n\n\n\n\n\n\nTags\n\n\n\n\nevents\n\n\n\n\ncurl (Mobile Device)\n\n\ncurl -X POST --header 'Content-Type: application/json' --header 'Accept: text/html' --header 'apikey: API_KEY' -d '{\n  \nuserId\n: 2736482,\n  \nphoneDetails\n: {\n    \ndeviceId\n: \nFCDBD8EF-62FC-4ECB-B2F5-92C9E79AC7F9\n,\n    \nmanufacturer\n: \nApple\n,\n    \nmodel\n: \niPhone 6\n,\n    \nlatitude\n: 28.6139,\n    \nlongitude\n: 77.209\n  }\n}' 'http://api.octomatic.in/events/app.init/'\n\n\n\n\ncurl (Desktop Web)\n\n\ncurl -X POST --header 'Content-Type: application/json' --header 'Accept: text/html' --header 'apikey: API_KEY' -d '{\n  \nuserId\n: 2736482,\n  \nbrowserDetails\n: {\n    \nname\n: \nchrome\n,\n    \nmanufacturer\n: \nGoogle\n,\n    \nplatform\n: \nLinux\n,\n    \ncookieid\n: \nabc123\n\n  }\n}' 'http://api.octomatic.in/events/app.init/'\n\n\n\n\nPost an app login event.\n\n\nPOST /events/app.login/\n\n\n\n\nDescription\n\n\nEvent fired when user logins to the app\n\n\nParameters\n\n\n\n\n\n\n\n\nType\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nBodyParameter\n\n\nbody\n\n\nUser ID\n\n\ntrue\n\n\nMessage\n\n\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nHTTP Code\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n200\n\n\nReturns the UUID for the event\n\n\nBeaconResponse\n\n\n\n\n\n\ndefault\n\n\nUnexpected Error\n\n\nError\n\n\n\n\n\n\n\n\nTags\n\n\n\n\nevents\n\n\n\n\ncurl (Mobile Device)\n\n\ncurl -X POST --header 'Content-Type: application/json' --header 'Accept: text/html' --header 'apikey: API_KEY' -d '{\n  \nuserId\n: 2736482,\n  \nphoneDetails\n: {\n    \ndeviceId\n: \nFCDBD8EF-62FC-4ECB-B2F5-92C9E79AC7F9\n,\n    \nmanufacturer\n: \nApple\n,\n    \nmodel\n: \niPhone 6\n,\n    \nlatitude\n: 28.6139,\n    \nlongitude\n: 77.209\n  }\n}' 'http://api.octomatic.in/events/app.login/'\n\n\n\n\ncurl (Desktop Web)\n\n\ncurl -X POST --header 'Content-Type: application/json' --header 'Accept: text/html' --header 'apikey: API_KEY' -d '{\n  \nuserId\n: 2736482,\n  \nbrowserDetails\n: {\n    \nname\n: \nchrome\n,\n    \nmanufacturer\n: \nGoogle\n,\n    \nplatform\n: \nLinux\n,\n    \ncookieid\n: \nabc123\n\n  }\n}' 'http://api.octomatic.in/events/app.login/'\n\n\n\n\nPost an app logout event.\n\n\nPOST /events/app.logout/\n\n\n\n\nDescription\n\n\nEvent fired when user logs out of the app.\n\n\nParameters\n\n\n\n\n\n\n\n\nType\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nBodyParameter\n\n\nbody\n\n\nUser ID\n\n\ntrue\n\n\nMessage\n\n\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nHTTP Code\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n200\n\n\nReturns the UUID for the event\n\n\nBeaconResponse\n\n\n\n\n\n\ndefault\n\n\nUnexpected Error\n\n\nError\n\n\n\n\n\n\n\n\nTags\n\n\n\n\nevents\n\n\n\n\ncurl (Mobile Device)\n\n\ncurl -X POST --header 'Content-Type: application/json' --header 'Accept: text/html' --header 'apikey: API_KEY' -d '{\n  \nuserId\n: 2736482,\n  \nphoneDetails\n: {\n    \ndeviceId\n: \nFCDBD8EF-62FC-4ECB-B2F5-92C9E79AC7F9\n,\n    \nmanufacturer\n: \nApple\n,\n    \nmodel\n: \niPhone 6\n,\n    \nlatitude\n: 28.6139,\n    \nlongitude\n: 77.209\n  }\n}' 'http://api.octomatic.in/events/app.logout/'\n\n\n\n\ncurl (Desktop Web)\n\n\ncurl -X POST --header 'Content-Type: application/json' --header 'Accept: text/html' --header 'apikey: API_KEY' -d '{\n  \nuserId\n: 2736482,\n  \nbrowserDetails\n: {\n    \nname\n: \nchrome\n,\n    \nmanufacturer\n: \nGoogle\n,\n    \nplatform\n: \nLinux\n,\n    \ncookieid\n: \nabc123\n\n  }\n}' 'http://api.octomatic.in/events/app.logout/'\n\n\n\n\nPost a page view event.\n\n\nPOST /events/page.view/\n\n\n\n\nDescription\n\n\nEvent fired when a page view happened. You should fire this event on every page change in the viewport\n\n\nParameters\n\n\n\n\n\n\n\n\nType\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nBodyParameter\n\n\nbody\n\n\nPage View Message\n\n\ntrue\n\n\nPageViewMessage\n\n\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nHTTP Code\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n200\n\n\nReturns the UUID for the event\n\n\nBeaconResponse\n\n\n\n\n\n\ndefault\n\n\nUnexpected Error\n\n\nError\n\n\n\n\n\n\n\n\nConsumes\n\n\n\n\napplication/json\n\n\n\n\nProduces\n\n\n\n\napplication/json\n\n\n\n\nTags\n\n\n\n\nevents\n\n\n\n\ncurl (Mobile Device)\n\n\ncurl -X POST --header 'Content-Type: application/json' --header 'Accept: text/html' --header 'apikey: API_KEY' -d '{\n  \nuserId\n: 2736482,\n  \nphoneDetails\n: {\n    \ndeviceId\n: \nFCDBD8EF-62FC-4ECB-B2F5-92C9E79AC7F9\n,\n    \nmanufacturer\n: \nApple\n,\n    \nmodel\n: \niPhone 6\n,\n    \nlatitude\n: 28.6139,\n    \nlongitude\n: 77.209\n  },\n  \nrouteUrl\n: \n/Home/DealsOfTheDay/34\n,\n  \ncategories\n: [\n    \nshopping\n,\n    \nhandbags\n,\n    \nrajasthani\n\n  ],\n  \ntags\n: [\n    \nhandbags\n,\n    \naldo\n,\n    \nyellow\n\n  ]\n}' 'http://api.octomatic.in/events/page.view/'\n\n\n\n\ncurl (Desktop Web)\n\n\ncurl -X POST --header 'Content-Type: application/json' --header 'Accept: text/html' --header 'apikey: API_KEY' -d '{\n  \nuserId\n: 2736482,\n  \nbrowserDetails\n: {\n    \nname\n: \nchrome\n,\n    \nmanufacturer\n: \nGoogle\n,\n    \nplatform\n: \nLinux\n,\n    \ncookieid\n: \nabc123\n\n  },\n  \nrouteUrl\n: \n/Home/DealsOfTheDay/34\n,\n  \ncategories\n: [\n    \nshopping\n,\n    \nhandbags\n,\n    \nrajasthani\n\n  ],\n  \ntags\n: [\n    \nhandbags\n,\n    \naldo\n,\n    \nyellow\n\n  ]\n}' 'http://api.octomatic.in/events/page.view/'\n\n\n\n\nPost a product page view event.\n\n\nPOST /events/productpage.view/\n\n\n\n\nDescription\n\n\nEvent fired when a product page view happened. You should fire this event on every page change in the viewport for products. Products are anything that the consumer consumes. It could cost them money or time. This cost is the value of 'price' parameter.\n\n\nParameters\n\n\n\n\n\n\n\n\nType\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nBodyParameter\n\n\nbody\n\n\nUser ID\n\n\ntrue\n\n\nProductPageViewMessage\n\n\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nHTTP Code\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n200\n\n\nReturns the UUID for the event\n\n\nBeaconResponse\n\n\n\n\n\n\ndefault\n\n\nUnexpected Error\n\n\nError\n\n\n\n\n\n\n\n\nTags\n\n\n\n\nevents\n\n\n\n\ncurl (Mobile Device)\n\n\ncurl -X POST --header 'Content-Type: application/json' --header 'Accept: text/html' --header 'apikey: API_KEY' -d '{\n  \nuserId\n: 2736482,\n  \nphoneDetails\n: {\n    \ndeviceId\n: \nFCDBD8EF-62FC-4ECB-B2F5-92C9E79AC7F9\n,\n    \nmanufacturer\n: \nApple\n,\n    \nmodel\n: \niPhone 6\n,\n    \nlatitude\n: 28.6139,\n    \nlongitude\n: 77.209\n  },\n  \nrouteUrl\n: \n/Home/DealsOfTheDay/34\n,\n  \ncategories\n: [\n    \nshopping\n,\n    \nhandbags\n,\n    \nrajasthani\n\n  ],\n  \ntags\n: [\n    \nhandbags\n,\n    \naldo\n,\n    \nyellow\n\n  ],\n  \nproductId\n: 63726,\n  \nproductName\n: \nSmartphone Series S01\n,\n  \nprice\n: 99.99\n}' 'http://api.octomatic.in/events/productpage.view/'\n\n\n\n\ncurl (Desktop Web)\n\n\ncurl -X POST --header 'Content-Type: application/json' --header 'Accept: text/html' --header 'apikey: API_KEY' -d '{\n  \nuserId\n: 2736482,\n  \nbrowserDetails\n: {\n    \nname\n: \nchrome\n,\n    \nmanufacturer\n: \nGoogle\n,\n    \nplatform\n: \nLinux\n,\n    \ncookieid\n: \nabc123\n\n  },\n  \nrouteUrl\n: \n/Home/DealsOfTheDay/34\n,\n  \ncategories\n: [\n    \nshopping\n,\n    \nhandbags\n,\n    \nrajasthani\n\n  ],\n  \ntags\n: [\n    \nhandbags\n,\n    \naldo\n,\n    \nyellow\n\n  ],\n  \nproductId\n: 63726,\n  \nproductName\n: \nSmartphone Series S01\n,\n  \nprice\n: 99.99\n}' 'http://api.octomatic.in/events/productpage.view/'\n\n\n\n\nUpdate push token for a user device.\n\n\nPOST /update_push_token/\n\n\n\n\nDescription\n\n\nUse this to update the tokens necessary for push notifications. This is exposed as a set of 3 attributes - notification type, push token and push key. Notification type should be 0 for iOS notification and 1 for android. Push token could be the GCM registration token or the APNS registration token for the app device. Push key is your app's GCM key or APN key. Userid is optional. If userid is not speficied, the gcm token is stored without a userid. If a userid gets updated for a gcm token in future, another call needs to be made mentioning the userid.\n\n\nParameters\n\n\n\n\n\n\n\n\nType\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nBodyParameter\n\n\nbody\n\n\nJSON object containing data\n\n\ntrue\n\n\nUpdatePushToken\n\n\n\n\n\n\n\n\n\n\nResponses\n\n\n\n\n\n\n\n\nHTTP Code\n\n\nDescription\n\n\nSchema\n\n\n\n\n\n\n\n\n\n\n200\n\n\nUUID of the event. You can use this UUID to trace an event.\n\n\nBeaconResponse\n\n\n\n\n\n\ndefault\n\n\nUnexpected error\n\n\nError\n\n\n\n\n\n\n\n\nTags\n\n\n\n\npush_notification\n\n\n\n\ncurl (only Mobile Device)\n\n\ncurl -X POST --header 'Content-Type: application/json' --header 'Accept: text/html' --header 'apikey: API_KEY' -d '{\n  \nuserId\n: 1146783,\n  \npushToken\n: \naKhsy762hHGSA90001S\n,\n  \npushKey\n: \naksjs:posiuujslaqhwns826262XYZ\n,\n  \nnotificationType\n: 0,\n  \nphoneDetails\n: {\n    \ndeviceId\n: \nFCDBD8EF-62FC-4ECB-B2F5-92C9E79AC7F9\n,\n    \nmanufacturer\n: \nApple\n,\n    \nmodel\n: \niPhone 6\n,\n    \nlatitude\n: 28.6139,\n    \nlongitude\n: 77.209\n  }\n}' 'http://api.octomatic.in/update_push_token/'\n\n\n\n\nDefinitions\n\n\nBeaconResponse\n\n\nBeacon response model\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\neventId\n\n\nThe UUID of the event. Use this to trace the event\n\n\nfalse\n\n\nstring\n\n\n\n\n\n\n\n\n\n\nError\n\n\nError model\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ncode\n\n\nError code\n\n\nfalse\n\n\ninteger (int32)\n\n\n\n\n\n\n\n\nmessage\n\n\nError message\n\n\nfalse\n\n\nstring\n\n\n\n\n\n\n\n\n\n\nMessage\n\n\nBase message model. Every message must belong to this model\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nuserId\n\n\nUnique User Id of the logged in user. Any unique tracking ID for logged out user.\n\n\ntrue\n\n\ninteger (int32)\n\n\n\n\n\n\n\n\nphoneDetails\n\n\nPhone Details of the user\n\n\ntrue\n\n\nPhoneDetails\n\n\n\n\n\n\n\n\n\n\nPageViewMessage\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nuserId\n\n\nUnique User Id of the logged in user. Any unique tracking ID for logged out user.\n\n\ntrue\n\n\ninteger (int32)\n\n\n\n\n\n\n\n\nphoneDetails\n\n\nPhone details of the user\n\n\ntrue\n\n\nPhoneDetails\n\n\n\n\n\n\n\n\nrouteUrl\n\n\nHuman readable unique routing Url for the page\n\n\ntrue\n\n\nstring\n\n\n\n\n\n\n\n\ncategories\n\n\nThe categories this page belongs to\n\n\nfalse\n\n\nstring array\n\n\n\n\n\n\n\n\ntags\n\n\nThe tags that can be associated with the page\n\n\nfalse\n\n\nstring array\n\n\n\n\n\n\n\n\n\n\nPhoneDetails\n\n\nModel for phone details of the user\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ndeviceId\n\n\nUnique ID of the user's device\n\n\nfalse\n\n\nstring\n\n\n\n\n\n\n\n\nmanufacturer\n\n\nManufacturer of the user's device\n\n\nfalse\n\n\nstring\n\n\n\n\n\n\n\n\nmodel\n\n\nDevice Model\n\n\nfalse\n\n\nstring\n\n\n\n\n\n\n\n\nlatitude\n\n\nLatitude of the user's device\n\n\nfalse\n\n\nnumber (float)\n\n\n\n\n\n\n\n\nlongitude\n\n\nLongitude of the user's device\n\n\nfalse\n\n\nnumber (float)\n\n\n\n\n\n\n\n\n\n\nProductPageViewMessage\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nuserId\n\n\nUnique User Id of the logged in user. Any unique tracking ID for logged out user.\n\n\ntrue\n\n\ninteger (int32)\n\n\n\n\n\n\n\n\nphoneDetails\n\n\nPhone details of the user\n\n\ntrue\n\n\nPhoneDetails\n\n\n\n\n\n\n\n\nrouteUrl\n\n\nHuman readable unique routing Url for the page\n\n\ntrue\n\n\nstring\n\n\n\n\n\n\n\n\ncategories\n\n\nCategories this product belongs to\n\n\nfalse\n\n\nstring array\n\n\n\n\n\n\n\n\ntags\n\n\nTags that can be associated with this product\n\n\nfalse\n\n\nstring array\n\n\n\n\n\n\n\n\nproductId\n\n\nUnique Product ID of the product being viewed\n\n\ntrue\n\n\ninteger (int32)\n\n\n\n\n\n\n\n\nproductName\n\n\nHuman understandable name of the product\n\n\ntrue\n\n\nstring\n\n\n\n\n\n\n\n\nprice\n\n\nPrice of the product\n\n\ntrue\n\n\nnumber (float)\n\n\n\n\n\n\n\n\n\n\nUpdatePushToken\n\n\nModel for update push token message\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nRequired\n\n\nSchema\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nuserId\n\n\nUnique User Id of the user.\n\n\nfalse\n\n\ninteger (int32)\n\n\n\n\n\n\n\n\npushToken\n\n\nPush Token for the user-device. This could be either the GCM Token or the APN Token\n\n\ntrue\n\n\nstring\n\n\n\n\n\n\n\n\npushKey\n\n\nYour app's push notification key. This could be either your app's GCM key or your app's APN key.\n\n\nfalse\n\n\nstring\n\n\n\n\n\n\n\n\nnotificationType\n\n\nSet this to 1 for Android GCM and 0 for iOS\n\n\ntrue\n\n\ninteger (int32)\n\n\n\n\n\n\n\n\nphoneDetails\n\n\nPhone details of user\n\n\ntrue\n\n\nPhoneDetails", 
            "title": "API Doc"
        }, 
        {
            "location": "/ApiDoc/index.html#octo_enterprise_api", 
            "text": "Octo Enterprise API  Overview  Version information  URI scheme  Consumes  Produces    Security  apikey    Paths  Post an app init event.  Description  Parameters  Responses  Tags  curl (Mobile Device)  curl (Desktop Web)    Post an app login event.  Description  Parameters  Responses  Tags  curl (Mobile Device)  curl (Desktop Web)    Post an app logout event.  Description  Parameters  Responses  Tags  curl (Mobile Device)  curl (Desktop Web)    Post a page view event.  Description  Parameters  Responses  Consumes  Produces  Tags  curl (Mobile Device)  curl (Desktop Web)    Post a product page view event.  Description  Parameters  Responses  Tags  curl (Mobile Device)  curl (Desktop Web)    Update push token for a user device.  Description  Parameters  Responses  Tags  curl (only Mobile Device)      Definitions  BeaconResponse  Error  Message  PageViewMessage  PhoneDetails  ProductPageViewMessage  UpdatePushToken", 
            "title": "Octo Enterprise API"
        }, 
        {
            "location": "/ApiDoc/index.html#overview", 
            "text": "Integrate with Octo Enterprise using our RESTful APIs.", 
            "title": "Overview"
        }, 
        {
            "location": "/ApiDoc/index.html#version_information", 
            "text": "Version: 1.0.0", 
            "title": "Version information"
        }, 
        {
            "location": "/ApiDoc/index.html#uri_scheme", 
            "text": "Host: api.octomatic.in  BasePath: /  Schemes: HTTP", 
            "title": "URI scheme"
        }, 
        {
            "location": "/ApiDoc/index.html#consumes", 
            "text": "application/json", 
            "title": "Consumes"
        }, 
        {
            "location": "/ApiDoc/index.html#produces", 
            "text": "application/json", 
            "title": "Produces"
        }, 
        {
            "location": "/ApiDoc/index.html#security", 
            "text": "", 
            "title": "Security"
        }, 
        {
            "location": "/ApiDoc/index.html#apikey", 
            "text": "Name  Value  In      apikey  Your Octomatic Enterprise API Key  HTTP Header", 
            "title": "apikey"
        }, 
        {
            "location": "/ApiDoc/index.html#paths", 
            "text": "", 
            "title": "Paths"
        }, 
        {
            "location": "/ApiDoc/index.html#post_an_app_init_event", 
            "text": "POST /events/app.init/", 
            "title": "Post an app init event."
        }, 
        {
            "location": "/ApiDoc/index.html#description", 
            "text": "Event fired when app is initiated. Everytime app comes to foreground, this event should be fired with all possible values.", 
            "title": "Description"
        }, 
        {
            "location": "/ApiDoc/index.html#parameters", 
            "text": "Type  Name  Description  Required  Schema  Default      BodyParameter  body  User ID  true  Message", 
            "title": "Parameters"
        }, 
        {
            "location": "/ApiDoc/index.html#responses", 
            "text": "HTTP Code  Description  Schema      200  Returns the UUID for the event.  BeaconResponse    default  Unexpected Error  Error", 
            "title": "Responses"
        }, 
        {
            "location": "/ApiDoc/index.html#tags", 
            "text": "events", 
            "title": "Tags"
        }, 
        {
            "location": "/ApiDoc/index.html#curl_mobile_device", 
            "text": "curl -X POST --header 'Content-Type: application/json' --header 'Accept: text/html' --header 'apikey: API_KEY' -d '{\n   userId : 2736482,\n   phoneDetails : {\n     deviceId :  FCDBD8EF-62FC-4ECB-B2F5-92C9E79AC7F9 ,\n     manufacturer :  Apple ,\n     model :  iPhone 6 ,\n     latitude : 28.6139,\n     longitude : 77.209\n  }\n}' 'http://api.octomatic.in/events/app.init/'", 
            "title": "curl (Mobile Device)"
        }, 
        {
            "location": "/ApiDoc/index.html#curl_desktop_web", 
            "text": "curl -X POST --header 'Content-Type: application/json' --header 'Accept: text/html' --header 'apikey: API_KEY' -d '{\n   userId : 2736482,\n   browserDetails : {\n     name :  chrome ,\n     manufacturer :  Google ,\n     platform :  Linux ,\n     cookieid :  abc123 \n  }\n}' 'http://api.octomatic.in/events/app.init/'", 
            "title": "curl (Desktop Web)"
        }, 
        {
            "location": "/ApiDoc/index.html#post_an_app_login_event", 
            "text": "POST /events/app.login/", 
            "title": "Post an app login event."
        }, 
        {
            "location": "/ApiDoc/index.html#description_1", 
            "text": "Event fired when user logins to the app", 
            "title": "Description"
        }, 
        {
            "location": "/ApiDoc/index.html#parameters_1", 
            "text": "Type  Name  Description  Required  Schema  Default      BodyParameter  body  User ID  true  Message", 
            "title": "Parameters"
        }, 
        {
            "location": "/ApiDoc/index.html#responses_1", 
            "text": "HTTP Code  Description  Schema      200  Returns the UUID for the event  BeaconResponse    default  Unexpected Error  Error", 
            "title": "Responses"
        }, 
        {
            "location": "/ApiDoc/index.html#tags_1", 
            "text": "events", 
            "title": "Tags"
        }, 
        {
            "location": "/ApiDoc/index.html#curl_mobile_device_1", 
            "text": "curl -X POST --header 'Content-Type: application/json' --header 'Accept: text/html' --header 'apikey: API_KEY' -d '{\n   userId : 2736482,\n   phoneDetails : {\n     deviceId :  FCDBD8EF-62FC-4ECB-B2F5-92C9E79AC7F9 ,\n     manufacturer :  Apple ,\n     model :  iPhone 6 ,\n     latitude : 28.6139,\n     longitude : 77.209\n  }\n}' 'http://api.octomatic.in/events/app.login/'", 
            "title": "curl (Mobile Device)"
        }, 
        {
            "location": "/ApiDoc/index.html#curl_desktop_web_1", 
            "text": "curl -X POST --header 'Content-Type: application/json' --header 'Accept: text/html' --header 'apikey: API_KEY' -d '{\n   userId : 2736482,\n   browserDetails : {\n     name :  chrome ,\n     manufacturer :  Google ,\n     platform :  Linux ,\n     cookieid :  abc123 \n  }\n}' 'http://api.octomatic.in/events/app.login/'", 
            "title": "curl (Desktop Web)"
        }, 
        {
            "location": "/ApiDoc/index.html#post_an_app_logout_event", 
            "text": "POST /events/app.logout/", 
            "title": "Post an app logout event."
        }, 
        {
            "location": "/ApiDoc/index.html#description_2", 
            "text": "Event fired when user logs out of the app.", 
            "title": "Description"
        }, 
        {
            "location": "/ApiDoc/index.html#parameters_2", 
            "text": "Type  Name  Description  Required  Schema  Default      BodyParameter  body  User ID  true  Message", 
            "title": "Parameters"
        }, 
        {
            "location": "/ApiDoc/index.html#responses_2", 
            "text": "HTTP Code  Description  Schema      200  Returns the UUID for the event  BeaconResponse    default  Unexpected Error  Error", 
            "title": "Responses"
        }, 
        {
            "location": "/ApiDoc/index.html#tags_2", 
            "text": "events", 
            "title": "Tags"
        }, 
        {
            "location": "/ApiDoc/index.html#curl_mobile_device_2", 
            "text": "curl -X POST --header 'Content-Type: application/json' --header 'Accept: text/html' --header 'apikey: API_KEY' -d '{\n   userId : 2736482,\n   phoneDetails : {\n     deviceId :  FCDBD8EF-62FC-4ECB-B2F5-92C9E79AC7F9 ,\n     manufacturer :  Apple ,\n     model :  iPhone 6 ,\n     latitude : 28.6139,\n     longitude : 77.209\n  }\n}' 'http://api.octomatic.in/events/app.logout/'", 
            "title": "curl (Mobile Device)"
        }, 
        {
            "location": "/ApiDoc/index.html#curl_desktop_web_2", 
            "text": "curl -X POST --header 'Content-Type: application/json' --header 'Accept: text/html' --header 'apikey: API_KEY' -d '{\n   userId : 2736482,\n   browserDetails : {\n     name :  chrome ,\n     manufacturer :  Google ,\n     platform :  Linux ,\n     cookieid :  abc123 \n  }\n}' 'http://api.octomatic.in/events/app.logout/'", 
            "title": "curl (Desktop Web)"
        }, 
        {
            "location": "/ApiDoc/index.html#post_a_page_view_event", 
            "text": "POST /events/page.view/", 
            "title": "Post a page view event."
        }, 
        {
            "location": "/ApiDoc/index.html#description_3", 
            "text": "Event fired when a page view happened. You should fire this event on every page change in the viewport", 
            "title": "Description"
        }, 
        {
            "location": "/ApiDoc/index.html#parameters_3", 
            "text": "Type  Name  Description  Required  Schema  Default      BodyParameter  body  Page View Message  true  PageViewMessage", 
            "title": "Parameters"
        }, 
        {
            "location": "/ApiDoc/index.html#responses_3", 
            "text": "HTTP Code  Description  Schema      200  Returns the UUID for the event  BeaconResponse    default  Unexpected Error  Error", 
            "title": "Responses"
        }, 
        {
            "location": "/ApiDoc/index.html#consumes_1", 
            "text": "application/json", 
            "title": "Consumes"
        }, 
        {
            "location": "/ApiDoc/index.html#produces_1", 
            "text": "application/json", 
            "title": "Produces"
        }, 
        {
            "location": "/ApiDoc/index.html#tags_3", 
            "text": "events", 
            "title": "Tags"
        }, 
        {
            "location": "/ApiDoc/index.html#curl_mobile_device_3", 
            "text": "curl -X POST --header 'Content-Type: application/json' --header 'Accept: text/html' --header 'apikey: API_KEY' -d '{\n   userId : 2736482,\n   phoneDetails : {\n     deviceId :  FCDBD8EF-62FC-4ECB-B2F5-92C9E79AC7F9 ,\n     manufacturer :  Apple ,\n     model :  iPhone 6 ,\n     latitude : 28.6139,\n     longitude : 77.209\n  },\n   routeUrl :  /Home/DealsOfTheDay/34 ,\n   categories : [\n     shopping ,\n     handbags ,\n     rajasthani \n  ],\n   tags : [\n     handbags ,\n     aldo ,\n     yellow \n  ]\n}' 'http://api.octomatic.in/events/page.view/'", 
            "title": "curl (Mobile Device)"
        }, 
        {
            "location": "/ApiDoc/index.html#curl_desktop_web_3", 
            "text": "curl -X POST --header 'Content-Type: application/json' --header 'Accept: text/html' --header 'apikey: API_KEY' -d '{\n   userId : 2736482,\n   browserDetails : {\n     name :  chrome ,\n     manufacturer :  Google ,\n     platform :  Linux ,\n     cookieid :  abc123 \n  },\n   routeUrl :  /Home/DealsOfTheDay/34 ,\n   categories : [\n     shopping ,\n     handbags ,\n     rajasthani \n  ],\n   tags : [\n     handbags ,\n     aldo ,\n     yellow \n  ]\n}' 'http://api.octomatic.in/events/page.view/'", 
            "title": "curl (Desktop Web)"
        }, 
        {
            "location": "/ApiDoc/index.html#post_a_product_page_view_event", 
            "text": "POST /events/productpage.view/", 
            "title": "Post a product page view event."
        }, 
        {
            "location": "/ApiDoc/index.html#description_4", 
            "text": "Event fired when a product page view happened. You should fire this event on every page change in the viewport for products. Products are anything that the consumer consumes. It could cost them money or time. This cost is the value of 'price' parameter.", 
            "title": "Description"
        }, 
        {
            "location": "/ApiDoc/index.html#parameters_4", 
            "text": "Type  Name  Description  Required  Schema  Default      BodyParameter  body  User ID  true  ProductPageViewMessage", 
            "title": "Parameters"
        }, 
        {
            "location": "/ApiDoc/index.html#responses_4", 
            "text": "HTTP Code  Description  Schema      200  Returns the UUID for the event  BeaconResponse    default  Unexpected Error  Error", 
            "title": "Responses"
        }, 
        {
            "location": "/ApiDoc/index.html#tags_4", 
            "text": "events", 
            "title": "Tags"
        }, 
        {
            "location": "/ApiDoc/index.html#curl_mobile_device_4", 
            "text": "curl -X POST --header 'Content-Type: application/json' --header 'Accept: text/html' --header 'apikey: API_KEY' -d '{\n   userId : 2736482,\n   phoneDetails : {\n     deviceId :  FCDBD8EF-62FC-4ECB-B2F5-92C9E79AC7F9 ,\n     manufacturer :  Apple ,\n     model :  iPhone 6 ,\n     latitude : 28.6139,\n     longitude : 77.209\n  },\n   routeUrl :  /Home/DealsOfTheDay/34 ,\n   categories : [\n     shopping ,\n     handbags ,\n     rajasthani \n  ],\n   tags : [\n     handbags ,\n     aldo ,\n     yellow \n  ],\n   productId : 63726,\n   productName :  Smartphone Series S01 ,\n   price : 99.99\n}' 'http://api.octomatic.in/events/productpage.view/'", 
            "title": "curl (Mobile Device)"
        }, 
        {
            "location": "/ApiDoc/index.html#curl_desktop_web_4", 
            "text": "curl -X POST --header 'Content-Type: application/json' --header 'Accept: text/html' --header 'apikey: API_KEY' -d '{\n   userId : 2736482,\n   browserDetails : {\n     name :  chrome ,\n     manufacturer :  Google ,\n     platform :  Linux ,\n     cookieid :  abc123 \n  },\n   routeUrl :  /Home/DealsOfTheDay/34 ,\n   categories : [\n     shopping ,\n     handbags ,\n     rajasthani \n  ],\n   tags : [\n     handbags ,\n     aldo ,\n     yellow \n  ],\n   productId : 63726,\n   productName :  Smartphone Series S01 ,\n   price : 99.99\n}' 'http://api.octomatic.in/events/productpage.view/'", 
            "title": "curl (Desktop Web)"
        }, 
        {
            "location": "/ApiDoc/index.html#update_push_token_for_a_user_device", 
            "text": "POST /update_push_token/", 
            "title": "Update push token for a user device."
        }, 
        {
            "location": "/ApiDoc/index.html#description_5", 
            "text": "Use this to update the tokens necessary for push notifications. This is exposed as a set of 3 attributes - notification type, push token and push key. Notification type should be 0 for iOS notification and 1 for android. Push token could be the GCM registration token or the APNS registration token for the app device. Push key is your app's GCM key or APN key. Userid is optional. If userid is not speficied, the gcm token is stored without a userid. If a userid gets updated for a gcm token in future, another call needs to be made mentioning the userid.", 
            "title": "Description"
        }, 
        {
            "location": "/ApiDoc/index.html#parameters_5", 
            "text": "Type  Name  Description  Required  Schema  Default      BodyParameter  body  JSON object containing data  true  UpdatePushToken", 
            "title": "Parameters"
        }, 
        {
            "location": "/ApiDoc/index.html#responses_5", 
            "text": "HTTP Code  Description  Schema      200  UUID of the event. You can use this UUID to trace an event.  BeaconResponse    default  Unexpected error  Error", 
            "title": "Responses"
        }, 
        {
            "location": "/ApiDoc/index.html#tags_5", 
            "text": "push_notification", 
            "title": "Tags"
        }, 
        {
            "location": "/ApiDoc/index.html#curl_only_mobile_device", 
            "text": "curl -X POST --header 'Content-Type: application/json' --header 'Accept: text/html' --header 'apikey: API_KEY' -d '{\n   userId : 1146783,\n   pushToken :  aKhsy762hHGSA90001S ,\n   pushKey :  aksjs:posiuujslaqhwns826262XYZ ,\n   notificationType : 0,\n   phoneDetails : {\n     deviceId :  FCDBD8EF-62FC-4ECB-B2F5-92C9E79AC7F9 ,\n     manufacturer :  Apple ,\n     model :  iPhone 6 ,\n     latitude : 28.6139,\n     longitude : 77.209\n  }\n}' 'http://api.octomatic.in/update_push_token/'", 
            "title": "curl (only Mobile Device)"
        }, 
        {
            "location": "/ApiDoc/index.html#definitions", 
            "text": "", 
            "title": "Definitions"
        }, 
        {
            "location": "/ApiDoc/index.html#beaconresponse", 
            "text": "Beacon response model     Name  Description  Required  Schema  Default      eventId  The UUID of the event. Use this to trace the event  false  string", 
            "title": "BeaconResponse"
        }, 
        {
            "location": "/ApiDoc/index.html#error", 
            "text": "Error model     Name  Description  Required  Schema  Default      code  Error code  false  integer (int32)     message  Error message  false  string", 
            "title": "Error"
        }, 
        {
            "location": "/ApiDoc/index.html#message", 
            "text": "Base message model. Every message must belong to this model     Name  Description  Required  Schema  Default      userId  Unique User Id of the logged in user. Any unique tracking ID for logged out user.  true  integer (int32)     phoneDetails  Phone Details of the user  true  PhoneDetails", 
            "title": "Message"
        }, 
        {
            "location": "/ApiDoc/index.html#pageviewmessage", 
            "text": "Name  Description  Required  Schema  Default      userId  Unique User Id of the logged in user. Any unique tracking ID for logged out user.  true  integer (int32)     phoneDetails  Phone details of the user  true  PhoneDetails     routeUrl  Human readable unique routing Url for the page  true  string     categories  The categories this page belongs to  false  string array     tags  The tags that can be associated with the page  false  string array", 
            "title": "PageViewMessage"
        }, 
        {
            "location": "/ApiDoc/index.html#phonedetails", 
            "text": "Model for phone details of the user     Name  Description  Required  Schema  Default      deviceId  Unique ID of the user's device  false  string     manufacturer  Manufacturer of the user's device  false  string     model  Device Model  false  string     latitude  Latitude of the user's device  false  number (float)     longitude  Longitude of the user's device  false  number (float)", 
            "title": "PhoneDetails"
        }, 
        {
            "location": "/ApiDoc/index.html#productpageviewmessage", 
            "text": "Name  Description  Required  Schema  Default      userId  Unique User Id of the logged in user. Any unique tracking ID for logged out user.  true  integer (int32)     phoneDetails  Phone details of the user  true  PhoneDetails     routeUrl  Human readable unique routing Url for the page  true  string     categories  Categories this product belongs to  false  string array     tags  Tags that can be associated with this product  false  string array     productId  Unique Product ID of the product being viewed  true  integer (int32)     productName  Human understandable name of the product  true  string     price  Price of the product  true  number (float)", 
            "title": "ProductPageViewMessage"
        }, 
        {
            "location": "/ApiDoc/index.html#updatepushtoken", 
            "text": "Model for update push token message     Name  Description  Required  Schema  Default      userId  Unique User Id of the user.  false  integer (int32)     pushToken  Push Token for the user-device. This could be either the GCM Token or the APN Token  true  string     pushKey  Your app's push notification key. This could be either your app's GCM key or your app's APN key.  false  string     notificationType  Set this to 1 for Android GCM and 0 for iOS  true  integer (int32)     phoneDetails  Phone details of user  true  PhoneDetails", 
            "title": "UpdatePushToken"
        }
    ]
}